[{"title":"react-native学习日记之TabNavigator","date":"2017-02-27T05:11:59.000Z","path":"2017/02/27/react-native学习日记之TabNavigator/","text":"安卓中不能像IOS一样有NavigatorIOS和tabBarIOS，如果需要跨平台实现类似的功能，必须要借助第三方组件如https://github.com/exponent/react-native-tab-navigator 安装： install react-native-tab-navigator```12345使用：```import TabNavigator from &apos;react-native-tab-navigator&apos; 这个组件的使用方式类似于TabBarIOS，配合Navigator一起使用就可以到达跨平台的效果了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, Image, Navigator&#125; from 'react-native';import TabNavigator from 'react-native-tab-navigator';import HomeView from './Components/homeView.js';import ProfileView from './Components/profileView.js';var icons=[ require('./imgs/tabbar_1.png'), require('./imgs/tabbar_2.png'), require('./imgs/tabbar_3.png'), require('./imgs/tabbar_4.png')];var pressIcons = [ require('./imgs/tabbar_1_press.png'), require('./imgs/tabbar_2_press.png'), require('./imgs/tabbar_3_press.png'), require('./imgs/tabbar_4_press.png')]export default class TabNavigatorDemo extends Component &#123; constructor(props) &#123; super(props); this.state=&#123; selectedTab:'home' &#125; &#125; render() &#123; let defaultName = 'HomeView'; let defaultComponent = HomeView; return ( &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt; &lt;TabNavigator tabBarStyle=&#123;styles.tabBarStyle&#125;&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'home'&#125; title=\"Home\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[0]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[0]&#125; /&gt;&#125; badgeText=\"1\" onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'home' &#125;)&#125;&gt; &lt;Navigator initialRoute=&#123;&#123;name:defaultName,component:defaultComponent&#125;&#125; configureScene=&#123;(route)=&gt;&#123; return Navigator.SceneConfigs.VerticalDownSwipeJump; &#125;&#125; renderScene=&#123;(route,navigator)=&gt;&#123; // console.log(route,navigator); let Component = route.component; return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt; &#125;&#125; navigationBar=&#123; &lt;Navigator.NavigationBar routeMapper=&#123;&#123; LeftButton: (route,navigator,index,navState)=&gt;&#123; return (&lt;Text&gt;前进&lt;/Text&gt;); &#125;, Title: (route,navigator,index,navState)=&gt;&#123; return (&lt;Text&gt;首页&lt;/Text&gt;); &#125;, RightButton: (route, navigator, index, navState) =&gt; &#123;&#125;, &#125;&#125; /&gt; &#125; /&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'profile'&#125; title=\"Profile\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[1]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[1]&#125; /&gt;&#125; // renderBadge=&#123;() =&gt; &lt;CustomBadgeView /&gt;&#125; onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'profile' &#125;)&#125;&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'favor'&#125; title=\"favor\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[2]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[2]&#125; /&gt;&#125; // renderBadge=&#123;() =&gt; &lt;CustomBadgeView /&gt;&#125; onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'favor' &#125;)&#125;&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'me'&#125; title=\"me\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[3]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[3]&#125; /&gt;&#125; // renderBadge=&#123;() =&gt; &lt;CustomBadgeView /&gt;&#125; onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'me' &#125;)&#125;&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;/TabNavigator&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; tabBarStyle: &#123; // backgroundColor:'red' &#125;, iconStyle: &#123; width:20, height:20 &#125;&#125;);AppRegistry.registerComponent('TabNavigatorDemo', () =&gt; TabNavigatorDemo);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之tabBar","date":"2017-02-22T03:44:59.000Z","path":"2017/02/22/react-native学习日记之tabBar/","text":"IOS 上可以使用tabBarIOS组件实现底栏tabBar，但是安卓不行。不过可以借助第三方组件实现类似的功能react-native-tab-view 基本用法如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View&#125; from 'react-native';import &#123;TabViewAnimated,TabBar&#125; from 'react-native-tab-view';export default class tabView extends Component &#123; state = &#123; index: 0, routes: [ &#123; key: '1', title: 'First' &#125;, &#123; key: '2', title: 'Second' &#125;, ], &#125;; _handleChangeTab = (index) =&gt; &#123; this.setState(&#123;index&#125;); &#125;; _renderHeader = (props) =&gt; &#123; console.log(TabBar); return &lt;TabBar &#123;...props&#125; style=&#123;styles.tabBar&#125;/&gt; &#125;; _renderFooter = (props) =&gt; &#123; console.log(TabBar); return &lt;TabBar &#123;...props&#125; style=&#123;styles.tabBar&#125; indicatorStyle=&#123;&#123;backgroundColor:'transparent'&#125;&#125;/&gt; &#125;; _renderScene = (&#123;route&#125;) =&gt; &#123; switch (route.key) &#123; case '1': return &lt;View style=&#123;[styles.page,&#123;backgroundColor:'#ff4081'&#125;]&#125;&gt; &lt;Text&gt; 第一页 &lt;/Text&gt; &lt;/View&gt; case \"2\": return &lt;View style=&#123;[styles.page,&#123;backgroundColor:'#673ab7'&#125;]&#125;&gt; &lt;Text&gt; 第二页 &lt;/Text&gt; &lt;/View&gt; default: return null; &#125; &#125;; render() &#123; return ( &lt;TabViewAnimated style=&#123;styles.container&#125; navigationState=&#123;this.state&#125; renderScene=&#123;this._renderScene&#125; renderHeader=&#123;this._renderHeader&#125; // renderFooter=&#123;this._renderFooter&#125; onRequestChangeTab=&#123;this._handleChangeTab&#125; /&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, page: &#123; flex: 1, alignItems: 'center', justifyContent: 'center', &#125;,&#125;);AppRegistry.registerComponent('tabView', () =&gt; tabView);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"atom package清单","date":"2017-02-19T07:35:16.000Z","path":"2017/02/19/atom-package清单/","text":"做个备份123456789101112131415161718192021222324252627282930313233Community Packages (32) /home/johnny/.atom/packages├── atom-material-syntax@1.0.2├── atom-material-ui@1.3.9├── atom-react-native-autocomplete@0.0.27├── atom-react-native-css@1.1.3├── atom-ternjs@0.17.0├── autoclose-html@0.23.0├── autocomplete-modules@1.6.7├── autocomplete-paths@1.0.5├── autoprefixer@3.6.1├── color-picker@2.2.5├── emmet@2.4.3├── file-icons@2.0.15├── fold-functions@0.5.0├── highlight-selected@0.12.0├── jquery-snippets@11.0.0├── language-babel@2.54.1├── language-javascript-jsx@0.3.7├── linter@1.11.21├── linter-csslint@1.3.3├── linter-htmlhint@1.3.1├── linter-js-standard-jsx@4.1.2├── linter-jshint@3.0.2├── markdown-preview-plus@2.4.1├── markdown-scroll-sync@2.1.2├── markdown-table-formatter@2.8.4├── minimap@4.26.8├── minimap-highlight-selected@4.5.0├── nuclide@0.205.0├── pigments@0.39.0├── react@0.16.2├── react-es6-snippets@0.3.0└── run-in-browser@0.1.3","tags":[{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}]},{"title":"react-native学习日记之ListView三","date":"2017-02-19T06:42:05.000Z","path":"2017/02/19/react-native学习日记之ListView三/","text":"ListView with SectionHeader要实现拥有section header 的ListView，需要dataBlob数据结构和renderSectionHeader 属性 dataBlobdataBlob是一个数据结构（通常是一个对象），包含了渲染ListView的所有数据。其中包括Section Header 数据和每个行Row的行数据Row Data。要获得dataBlob中的数据，首先要实现遍历方法(getSectionData 和 getRowData) dataBlob结构： 实现getSectionData 和 getRowData 1234567891011121314151617constructor(props) &#123; super(props); var getSectionData = (dataBlob,sectionID) =&gt; &#123; return dataBlob[sectionID]; &#125; var getRowData = (dataBlob,sectionID,rowID) =&gt; &#123; return dataBlob[sectionID+':'+rowID]; &#125; this.state = &#123; dataSource: new ListView.DataSource(&#123; getSectionData:getSectionData, getRowData:getRowData, rowHasChanged: (r1,r2)=&gt;r1!==r2, sectionHeaderHasChanged:(s1,s2)=&gt;s1!==s2 &#125;) &#125;&#125; 处理外部json数据，生成dataBlobjson数据如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; \"data\": [ &#123; \"images\": [ &#123; \"icon\": \"a\", \"name\": \"路飞\" &#125;, &#123; \"icon\": \"b\", \"name\": \"阿里\" &#125;, &#123; \"icon\": \"c\", \"name\": \"。。。\" &#125;, &#123; \"icon\": \"d\", \"name\": \"风景\" &#125;, &#123; \"icon\": \"e\", \"name\": \"女神(づ￣ 3￣)づ\" &#125; ], \"title\": \"B\" &#125;, &#123; \"images\": [ &#123; \"icon\": \"a\", \"name\": \"路飞\" &#125;, &#123; \"icon\": \"b\", \"name\": \"阿里\" &#125;, &#123; \"icon\": \"c\", \"name\": \"。。。\" &#125;, &#123; \"icon\": \"d\", \"name\": \"风景\" &#125;, &#123; \"icon\": \"e\", \"name\": \"女神(づ￣ 3￣)づ\" &#125; ], \"title\": \"B\" &#125;, ... ]&#125; 1234567891011121314151617181920212223242526272829303132loadDataFromJson() &#123; var data = require('./data.json').data; console.log(data); var dataBlob = &#123;&#125;, sectionIDs = []; //存放组ID的数组 rowIDs = []; //存放行ID的数组 rows = []; //存放行数据数组 for(var i=0,l=data.length;i&lt;l;i++) &#123; // 1.把section id 放入sectionID数组中 var sectionID = i; // sectionIDs.push(sectionID); sectionIDs.push(i); //sectionID 不一定必须是i：0,1,2,3... // 2. 把组中内容放入dataBlob中 // 相当于dataBlob[SectionID]=data[i].title dataBlob[i]=data[i].title; // 3. 取出该数组中所有的行数据 rows = data[i].images; // 4. 记录每一行中的数据 rowIDs[i]=[]; // 5. 获取行中每一组数据 for(var j=0,lr=rows.length;j&lt;lr;j++)&#123; // 把行号放入rowIDs中 rowIDs[i].push(j); // 把每一行中的内容放如dataBlob对象中 dataBlob[i+':'+j] = rows[j]; &#125; &#125; console.log(dataBlob,sectionIDs,rowIDs); this.setState(&#123; dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs) &#125;);&#125; 可以看到将dataBlob，sectionIDs，rowIDs打印出来是如下结果 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121/** * 吸顶效果 */import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image,&#125; from 'react-native';export default class ListViewSectionHeader extends Component &#123; constructor(props) &#123; super(props); var getSectionData = (dataBlob,sectionID) =&gt; &#123; return dataBlob[sectionID]; &#125; var getRowData = (dataBlob,sectionID,rowID) =&gt; &#123; return dataBlob[sectionID+':'+rowID]; &#125; this.state = &#123; dataSource: new ListView.DataSource(&#123; getSectionData:getSectionData, getRowData:getRowData, rowHasChanged: (r1,r2)=&gt;r1!==r2, sectionHeaderHasChanged:(s1,s2)=&gt;s1!==s2 &#125;) &#125; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderRow&#125; renderSectionHeader=&#123;this.renderSectionHeader&#125; /&gt; ); &#125; componentDidMount() &#123; this.loadDataFromJson(); &#125; loadDataFromJson() &#123; var data = require('./data.json').data; console.log(data); var dataBlob = &#123;&#125;, sectionIDs = []; //存放组ID的数组 rowIDs = []; //存放行ID的数组 rows = []; //存放行数据数组 for(var i=0,l=data.length;i&lt;l;i++) &#123; // 1.把section id 放入sectionID数组中 var sectionID = i; // sectionIDs.push(sectionID); sectionIDs.push(i); //sectionID 不一定必须是i：0,1,2,3... // 2. 把组中内容放入dataBlob中 // 相当于dataBlob[SectionID]=data[i].title dataBlob[i]=data[i].title; // 3. 取出该数组中所有的行数据 rows = data[i].images; // 4. 记录每一行中的数据 rowIDs[i]=[]; // 5. 获取行中每一组数据 for(var j=0,lr=rows.length;j&lt;lr;j++)&#123; // 把行号放入rowIDs中 rowIDs[i].push(j); // 把每一行中的内容放如dataBlob对象中 dataBlob[i+':'+j] = rows[j]; &#125; &#125; console.log(dataBlob,sectionIDs,rowIDs); this.setState(&#123; dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs) &#125;); &#125; renderRow(owData,sectionID,rowID,highlightRow) &#123; console.log(owData); return( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125;&gt; &lt;View style=&#123;styles.innerViewStyle&#125;&gt; &lt;Image source=&#123;&#123;uri:owData.icon&#125;&#125; style=&#123;styles.iconStyle&#125;/&gt; &lt;Text style=&#123;styles.descStyle&#125;&gt; &#123;owData.name&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); &#125; renderSectionHeader(sectionData,sectionID) &#123; return( &lt;View style=&#123;styles.secHeaderStyle&#125;&gt; &lt;Text&gt; &#123;sectionData&#125; &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; innerViewStyle: &#123; flexDirection:'row' &#125;, iconStyle: &#123; width: 100, height: 100, &#125;, descStyle: &#123; fontSize: 20, alignSelf:'center', marginLeft:20 &#125;, secHeaderStyle: &#123; height:30, justifyContent:'center', paddingLeft:10, backgroundColor:\"#ede1e1\" &#125;&#125;);AppRegistry.registerComponent('ListViewSectionHeader', () =&gt; ListViewSectionHeader); 最终效果很难看，不过实现方式没错就行啦","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"ubuntu 14.04配置","date":"2017-02-17T15:05:15.000Z","path":"2017/02/17/ubuntu配置/","text":"最近又尝试从Windows 切换到 ubuntu 。经过很多次折腾，发现自己对linux 有了一定的理解过后再去接触这些，已经不再那么陌生和“恐惧”了 安装Windows 10 和 ubuntu 共存安装参考 切换显卡系统设置–&gt; 软件和更行 –&gt; 附加驱动（据说开源驱动性能虽然不强，但是稳定性好，我还是继续用开源驱动吧） 换主题unity乳齿便秘的默认主题真的让我第一次开机看到它过后就想换掉！ubuntu14.04的主题很多不是扁平化的，如果电脑支持的话还是安装16.04比较好（该死的联想z485） 首先安装unity-tweak-tool1sudo apt install unity-tweak-tool 然后推荐去noobSlab，这个网站有很多个主题可以选择，安装方式也写出来了，配合unity-tweak-tool使用。个人喜欢Numix主题 安装搜狗输入法去搜狗官网下载linux 版本搜狗，然后双击安装，完毕后。系统设置–&gt;语言支持–&gt;键盘输入方式系统：fcitx–&gt;重启 如果发现安装好后不能调出输入法面板，输入时只能看不到候选词，那么可以检查一下依赖sudo apt-get install -f 如果使用一段时间过后搜狗输入法一直崩溃,可能是配置文件出问题了，可以选择删除配置文件，然后重启fctix12345killall fctixrm -rf ~/.config/sogou-qimpanelrm -rf ~/.config/SogouPY.usersrm -rf ~/.config/SogouPYfctix 安装cairo-dock很实用的小工具（模拟mac的dock栏）1234sudo add-apt-repository ppa:cairo-dock-team/ppasudo apt-get updatesudo apt-get install cairo-dock# 启动命令 cairo-dock 第一次打开会提示是否开启OpenGl，我的电脑上面测试开启过后会出问题，我选择不开启，如果以后想开启，可以使用cairo-dock -c（不开启） / cario-dock -o（开启OpenGl）切换 安装shadowsocks-qt5“纸飞机”这个东西还是必须要有的啊，没有这个东西感觉整个人都不好了1234sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5#启动命令 ss-qt5 安装proxychain4ss-qt5 是桌面级应用，尽管连上代理，命令行还是无法通过代理上网。proxychain 可以完美解决命令行不能使用代理的问题1234git clone https://github.com/rofl0r/proxychains-ng.gitcd proxychains-ng./configure(sudo) make &amp;&amp; make instal 安装完毕后，需要手动新建配置文件12345sudo vi /etc/proxychains.conf#然后填入以下内容[ProxyList]socks5 127.0.0.1 1080 使用方法1proxychains (sudo) 需要执行的命令 ... 为firefox 和 chrome 安装flash首先进入系统设置–&gt;软件和更行–&gt;其它软件–&gt;勾选Canonial合作伙伴，然后运行命令1sudo apt install adobe-flashplugin 安装atomatom 是一款非常优秀的编辑器，不解释。由于官方网站没有提供32bit deb包（64bit无视），因此需要自行通过ppa安装123sudo add-apt-repository ppa:webupd8team/atom sudo apt-get update sudo apt-get install atom 安装nodejs 最新版（较新版）到https://nodejs.org/download/release/v7.5.0/ 去下载最新的nodejs包我这里选择node-v7.5.0-linux-x86.tar.gz下载下来过后，执行1234tar -zxvf node-v7.5.0-linux-x86.tar.gzcp node-v7.5.0-linux-x86 /opt/node-v7.5.0sudo ln -s /opt/node-v7.5.0/bin/node /usr/local/bin/nodesudo ln -s /opt/node-v7.5.0/bin/npm /usr/local/bin/npm 现在可以使用node 和npm命令了，接下载就是配置npm 全局安装路径了（可以不用配置）12npm config set prefix \"/home/johnny/.npm-global/\"# 使用npm config get prefix 可以查看全局安装路径 还没完，这时候npm install xxx -g 过后会发现执行xxx命令无效。比如说安装hexo， npm install hexo -g成功后，执行hexo却提示command not found。配置一下环境变量就可以解决这个问题1echo -e \"export PATH=$(npm prefix -g)/bin:$PATH\" &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc 安装oracle-jdk首先下载jdk然后解压,我将他解压到了~/jdk1.8.0_121/,如果只是当前用户用的话，直接改.bashrc文件中配置环境变量就好了，不过建议写到/etc/profile中123456vi ~/.bashrc#在最末尾加入export JAVA_HOME=/home/johnny/jdk1.8.0_121 ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jre export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 然后12source ~/.bashrcjava -version 就可以看到java版本已经变成安装的版本了 安卓开发环境搭建https://developer.android.com/studio/index.html下载好sdk，解压到自己想解压的目录，我这里解压到/home/johnny/sdk然后配置环境变量 12345vi ~/.bashrc#在最末尾加入export ANDROID_HOME=/home/johnny/Johnny/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools 现在执行android 就可以打开sdk 管理器了，下载自己需要的package就行了。但是由于现在的sdk版本高了，默认是64位，所以32位ubuntu在运行adb命令时就会报错。file adb 也可以看到adb是64位的。解决方案就是将platform-tools 替换成32位的老版本，替换后就可以成功运行adb命令了 最终效果","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://yoursite.com/tags/ubuntu/"}]},{"title":"react-native学习日记之ListView","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView/","text":"react-native ListView DOC ListView 基本用法1234567891011121314151617181920212223242526//es5 写法var ListViewDemo = React.createClass(&#123; getInitialState() &#123; // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); // 1.2 设置返回数据 return &#123; //listData 为一个数组格式 dataSource: ds.cloneWithRows(listData) &#125; &#125;, // 设置render函数 render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; //this.renderListView后不加括号表示默认接受所有参数（owData，sectionID...) /&gt; ); &#125;, renderListView(owData, sectionID, rowID, highlightRow) &#123; //renderRow 回调函数 &#125;&#125; 12345678910111213141516171819//es6 写法class MyComponent extends Component &#123; constructor() &#123; super(); const ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows(listData), &#125;; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; /&gt; ); &#125;&#125; 完整demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, Image, TouchableOpacity, Alert&#125; from 'react-native';var listData = [ &#123; src:'a', desc:'第一张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;];var ListViewDemo = React.createClass(&#123; getInitialState() &#123; // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); // 1.2 设置返回数据 return &#123; dataSource: ds.cloneWithRows(listData) &#125; &#125;, // 设置render函数 render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; renderSeparator=&#123;(sectionID, rowID, adjacentRowHighlighted)=&gt;&#123; return ( &lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; style=&#123;&#123;height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125; &gt;&lt;/View&gt; ); &#125;&#125; /&gt; ); &#125;, // renderRow的回调函数 renderListView(owData, sectionID, rowID, highlightRow) &#123; return ( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125; onPress=&#123;()=&gt;highlightRow(sectionID,rowID)&#125;&gt; &lt;View style=&#123;styles.cellViewStyle&#125;&gt; &#123;/*左边的图片src*/&#125; &lt;Image source=&#123;&#123;uri:owData.src&#125;&#125; style=&#123;&#123;width:100,height:100,marginRight:15,borderRadius:50&#125;&#125;/&gt; &#123;/*右边的图片描述desc*/&#125; &lt;View style=&#123;styles.descStyle&#125;&gt; &lt;Text&gt; &#123;owData.desc&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); &#125;&#125;)const styles = StyleSheet.create(&#123; cellViewStyle: &#123; // borderBottomWidth: 1, // borderBottomColor: '#eeeeee', flexDirection:'row', &#125;, descStyle: &#123; flexDirection:'row', alignItems:'center' &#125;&#125;);AppRegistry.registerComponent('ListViewDemo', () =&gt; ListViewDemo); 运行效果初始状态。onPress触发后 注意cloneWithRows接受一个数组renderRow，hightlightRow &amp; renderSeparator renderRow 的回调函数可以接受4个参数，分别是数据，区块id，行id，highlightRow回调函数 其中hightlightRow的用法文档里面写的不是很明白。搜了一下，发现是这样用的 http://stackoverflow.com/questions/36000842/how-do-i-call-highlightrow-of-listview-renderrow 大致过程是这样的，如果触发了hightlightRow(sectionID,rowID)函数，则会将该sectionID，rowID相应的单元行的标记为highlighted。而renderSeparator会检查每一个row的相邻row的highlight情况，也就是adjacentRowHighlighted 的真假。adjacentRowHighlighted默认为false 文档对renderSeparator的解释 renderSeparator function #(sectionID, rowID, adjacentRowHighlighted) =&gt; renderable如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。在其上方的小节ID和行ID，以及邻近的行是否被高亮会作为参数传递进来。 (sectionID, rowID, adjacentRowHighlighted) =&gt; renderableIf provided, a renderable component to be rendered as the separator below each row but not the last row if there is a section header below. Take a sectionID and rowID of the row above and whether its adjacent row is highlighted. 123&lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; style=&#123;&#123;height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125;&gt;&lt;/View&gt; 这块代码表示了当adjacentRowHighlighted为true时，该view（分割线）的颜色为蓝色。 另外 http://wiki.jikexueyuan.com/project/react-native/image.htm 1&lt;Image source=&#123;&#123;uri:...&#125;&#125;/&gt; 中的uri的用法","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之ListView二","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView二/","text":"用listView实现九宫格效果这次时照着es6的写法写的，es6和es5的写法有很多地方不一样123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image&#125; from 'react-native';import Dimensions from 'Dimensions';const listData = [ &#123; src:'a', desc:'第一张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;];// 获取屏幕宽高var &#123;width,height&#125; = Dimensions.get('window');var cols = 3; //3列var cellWidth = 100,cellHeight = 100;var vMargin = (width-cols*cellWidth)/(cols+1); //九宫格横向margin算法var hMargin = 20; //九宫格纵向marginexport default class ListViewjiugongge extends Component &#123; constructor(props) &#123; super(props); const ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows(listData) &#125; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderRow&#125; // renderSeparator=&#123;(sectionID,rowID,adjacentRowHighlighted)=&gt;&#123; // console.log(sectionID,rowID,adjacentRowHighlighted); // return( // &lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; // style=&#123;&#123;height:90,width:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125; // &gt;&lt;/View&gt; // ) // &#125;&#125; contentContainerStyle=&#123;styles.listViewStyle&#125; /&gt; ); &#125; renderRow(owData,sectionID,rowID,highlightRow) &#123; return( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125; onPress=&#123;()=&gt;&#123;highlightRow(sectionID,rowID)&#125;&#125;&gt; &lt;View style=&#123;styles.cellViewStyle&#125;&gt; &#123;/*图片src*/&#125; &lt;Image source=&#123;&#123;uri:owData.src&#125;&#125; style=&#123;&#123;width:100,height:100,borderRadius:50&#125;&#125;/&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; listViewStyle: &#123; flexDirection:'row', flexWrap:'wrap', alignItems:'flex-start' &#125;, cellViewStyle: &#123; marginLeft:vMargin, marginTop: hMargin &#125;, descStyle: &#123; // flexDirection:'row', // alignItems:'center' &#125;&#125;);AppRegistry.registerComponent('ListViewjiugongge', () =&gt; ListViewjiugongge);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native 学习日记之ScrollView","date":"2017-02-07T09:44:54.000Z","path":"2017/02/07/学习日记/","text":"使用ScrollView 实现轮播效果还行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, Image, ScrollView&#125; from 'react-native';var Images = require('./images.json');import Dimensions from 'Dimensions';import TimerMixin from 'react-timer-mixin';var width = Dimensions.get('window').width;var ScrollViewProject = React.createClass(&#123; mixins:[TimerMixin], getInitialState() &#123; return &#123; currentPage:0 &#125; &#125;, render() &#123; return( &lt;View style=&#123;styles.container&#125;&gt; &#123;/*轮播*/&#125; &lt;ScrollView ref='scrollView' horizontal=&#123;true&#125; showsHorizontalScrollIndicator=&#123;false&#125; pagingEnabled=&#123;true&#125; onScroll=&#123;(e)=&gt;this.changeIndicators(e)&#125; onScrollBeginDrag=&#123;this.onScrollBeginDrag&#125; onScrollEndDrag=&#123;this.onScrollEndDrag&#125; &gt; &#123;this.renderAllImage()&#125; &lt;/ScrollView&gt; &#123;/*轮播指示器*/&#125; &lt;View style=&#123;styles.indicators&#125;&gt; &#123;this.renderIndicator()&#125; &lt;/View&gt; &lt;/View&gt; ); &#125;, componentDidMount() &#123; // this.setInterval( // ()=&gt;console.log('testTimeout'),1000 // ); // 开启定时器 this.startTimer(); &#125;, renderAllImage() &#123; var allImgs = []; var imgData = Images.data; var srcs = [ require(\"./imgs/a.jpg\"), require(\"./imgs/b.jpg\"), require(\"./imgs/c.jpg\"), require(\"./imgs/d.jpg\"), require(\"./imgs/e.jpg\") ]; for(let i=0;i&lt;imgData.length;i++) &#123; allImgs.push( &lt;Image key=&#123;i&#125; source=&#123;srcs[i]&#125; style=&#123;&#123;width:width,height:180&#125;&#125; /&gt; ) &#125; return allImgs; &#125;, renderIndicator() &#123; var indicators = []; for(let i=0;i&lt;5;i++) &#123; let style = (i==this.state.currentPage)?&#123;color:'#ffff00'&#125;:&#123;color:'#ffffff'&#125; indicators.push( &lt;Text key=&#123;i&#125; style=&#123;[&#123;fontSize:30,marginLeft:5&#125;,style]&#125;&gt;&amp;bull;&lt;/Text&gt; ) &#125; return indicators; &#125;, changeIndicators(e) &#123; var offsetX = e.nativeEvent.contentOffset.x; this.setState(&#123; currentPage:Math.floor(offsetX/width) &#125;) &#125;, // 设置轮播自动滚动 startTimer() &#123; // 1. 拿到scrollView var scrollView = this.refs.scrollView; // 2. 添加定时器 this.timer = this.setInterval(()=&gt;&#123; // console.log('haha'); // 2.1 设置圆点 var activePage; // 2.2 判断 if(this.state.currentPage+1 &gt;=5) activePage=0; else activePage=this.state.currentPage+1; // 2.3 更新状态 this.setState(&#123; currentPage:activePage &#125;) // 2.4 让scroll滚动起来 var offsetX = activePage * width; scrollView.scrollResponderScrollTo(&#123;x:offsetX,y:0,animated:true&#125;); &#125;,1000); &#125;, // 拖动轮播时停止定时器 onScrollBeginDrag() &#123; this.clearInterval(this.timer); &#125;, // 拖动结束后打开定时器 onScrollEndDrag() &#123; this.startTimer(); &#125;&#125;);const styles = StyleSheet.create(&#123; container: &#123; // flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', // marginTop:20 &#125;, indicators: &#123; flexDirection:'row', backgroundColor:'rgba(0,0,0,0.1)', height:30, width:width, alignItems:'center', marginTop:-30 &#125;&#125;);AppRegistry.registerComponent('ScrollViewProject', () =&gt; ScrollViewProject);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"'Generator 执行顺序'","date":"2016-12-26T04:13:50.000Z","path":"2016/12/26/Generator/","text":"generator 不同于普通的函数，执行方式有区别 12345678function* foo() &#123; yield 1; console.log(yield);&#125;let fooObj = foo();console.log(fooObj.next());console.log(fooObj.next());console.log(fooObj.next()); 第一个fooObj.next() 返回Object {value: 1, done: false}此时fooObj指针指向的是yield 1(第一个yield) 第二次运行fooObj.next(), 指针指向console.log(yield)中的yield即第二个yeild,此时函数返回Object {value: undefined, done: false} 第三次运行fooObj.next(), 指针继续向后移动,开始执行console.log(yield)语句,由于next参数为undefined,则指定上一次(即第二次yeild)yeild为undefined所以打印出undefined 和 Object {value: undefined, done: true}","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}]}]