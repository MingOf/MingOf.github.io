[{"title":"react-router V4 踩坑","date":"2017-08-01T02:59:12.000Z","path":"2017/08/01/react-router-V4-踩坑/","text":"The prop `history` is marked as required in `Router` …The prop `history` is marked as required in `Router`, but its value is `undefined`. in Router 解决办法:出现这个报错是因为我用npm 安装的是react-router v4，react-router v4不再使用&lt;Router history={hashHistory}&gt; 这种方式定义history 实现类型。而是直接通过组件如BrowserRouter,HashRouter等 import {Router, Route, hashHistory} from &#39;react-router&#39;; &lt;Router history={hashHistory}&gt; &lt;Route path=&quot;/&quot; component={Main}&gt;&lt;/Route&gt; &lt;/Router&gt; ===&gt; import {BrowserRouter as Router, Route} from &#39;react-router-dom&#39;; &lt;Router&gt; &lt;Route path=&quot;/&quot; component={Main}&gt;&lt;/Route&gt; &lt;/Router&gt; 或者 &lt;HashRouter&gt; &lt;Route path=&quot;/&quot; component={Main}&gt;&lt;/Route&gt; &lt;/HashRouter&gt; A ‘Router’ may have only one child elementreact-router v4 在 下面只能放一个层级，类似与react 中render 不能有两个平级div一样 解决办法：用div 或者Switch 包裹所有Route &lt;Router&gt; &lt;div&gt; &lt;Route component={ComponentHeader}&gt;&lt;/Route&gt; &lt;Switch&gt; &lt;Route component={ComponentFooter} path=&#39;/footer/:id&#39;&gt;&lt;/Route&gt; &lt;/Switch&gt; &lt;/div&gt; &lt;/Router&gt; webpack 配置问题v4 中引入&lt;BrowserRouter&gt; 组件, 而BrowserRouter使用的是HTML5 的history api, 在使用webpack-dev-server时会遇到 GET http://localhost:8080/xxx/xxx 404 (Not Found) 解决办法：webpack.config.js中加入 devServer: { apiHistoryFallback: true, } output: { ..., publicPath: &#39;/&#39;, } 然后将index.html中的bundle.js改为/bundle.js &lt;script src=&#39;bundle.js&#39;&gt;&lt;/script&gt; ===&gt; &lt;script src=&#39;/bundle.js&#39;&gt;&lt;/script&gt; 参考：https://stackoverflow.com/questions/43209666/react-router-v4-cannot-get-url questionhttps://segmentfault.com/q/1010000010432084?_ea=2287891 静态路由和动态路由https://reacttraining.com/react-router/web/guides/philosophy react-router 传参使用/xxx/:someparam 的形式书写Route 的path属性，如： &lt;Route component={ComponentFooter} path=&#39;/footer/:id&#39;&gt;&lt;/Route&gt; 然后Link 的to属相加上参数即可，如： &lt;Link to=&#39;/footer/1234&#39;&gt;Ant design demo 1&lt;/Link&gt; 最后在ComponentFooter中通过this.props.match.params访问，如： &lt;footer className={footerCss.miniFooter}&gt; &lt;em&gt;id:{this.props.match.params.id}&lt;/em&gt; &lt;/footer&gt; 完整代码/** * js| * |root.js */ import React from &#39;react&#39;; import ReactDOM from &#39;react-dom&#39;; import ComponentHeader from &#39;./components/header&#39;; // import ComponentFooter from &#39;./components/footer&#39;; var footerCss = require(&#39;../css/footer.css&#39;); import {BrowserRouter as Router, Route, Switch, Link} from &#39;react-router-dom&#39;; class App extends React.Component { constructor(props) { super(props); } render() { return ( &lt;Router&gt; &lt;div&gt; &lt;Route component={ComponentHeader}&gt;&lt;/Route&gt; &lt;Switch&gt; &lt;Route component={ComponentFooter} path=&#39;/footer/:id&#39;&gt;&lt;/Route&gt; &lt;/Switch&gt; &lt;/div&gt; &lt;/Router&gt; ) } } class ComponentFooter extends React.Component { constructor() { super(); } render() { return ( &lt;footer className={footerCss.miniFooter}&gt; &lt;em&gt;id:{this.props.match.params.id}&lt;/em&gt; &lt;h1&gt;&lt;Link to={`${this.props.match.url}/cr`}&gt;footer&lt;/Link&gt;&lt;/h1&gt; &lt;Route component={CopyRight} path={`${this.props.match.url}/cr`}&gt;&lt;/Route&gt; &lt;/footer&gt; ) } } class CopyRight extends React.Component { constructor() { super(); } render() { return ( &lt;a&gt;copyright&lt;/a&gt; ) } } ReactDOM.render( &lt;App /&gt;,document.getElementById(&#39;root&#39;) ) /** * js| * |components| * |header.js */ import React from &#39;react&#39;; import {Link} from &#39;react-router-dom&#39;; var headerCss = require(&#39;../../css/header.css&#39;); export default class Header extends React.Component { constructor() { super(); } render() { console.log(headerCss); return ( &lt;header className={headerCss.bgheader}&gt; &lt;h1&gt;&lt;Link to=&#39;/footer/1234&#39;&gt;Ant design demo 1&lt;/Link&gt;&lt;/h1&gt; &lt;/header&gt; ) } }","tags":[]},{"title":"webpack css-modules 和global css 共存","date":"2017-07-30T09:29:14.000Z","path":"2017/07/30/webpack-css-modules-和global-css-共存/","text":"在使用ant design 时候遇到ant design css 和自定义的css 冲突的问题。./node_modules/ 中ant desing 的css 文件作为全局的css 和 自定义的css_modules 会发生冲突。解决办法是将/node_modules/中的css与自定义的css 分开处理。即对css_modules使用exclude:/node_modules/，对node_modules中的css使用include:path.resolve(__dirname,&#39;node_modules&#39;) 最开始定义的webpack.config.js 的处理方式： var webpack = require(&#39;webpack&#39;); var path = require(&#39;path&#39;); module.exports = { context: __dirname+&#39;/src&#39;, entry: &quot;./js/index.js&quot;, module: { rules: [ { test: /\\.js?$/, exclude: /(node_modules)/, use: { loader: &#39;babel-loader&#39;, options: { presets: [&#39;react&#39;,&#39;es2015&#39;], // ant design babel-plugin-import plugins: [[&#39;import&#39;,{&#39;libraryName&#39;:&#39;antd&#39;,&#39;style&#39;:&#39;css&#39;}]] } } }, { test: /\\.css$/, exclude: /(node_modules)/, use: [ {loader:&#39;style-loader&#39;}, { loader: &#39;css-loader&#39;, options: { modules: true, loacalIdentName: &#39;[name]__[local]_[hash:base64:5]&#39;, sourceMap: true, importLoaders: 1 } } ] }, ] }, output: { path: __dirname+&#39;/src&#39;, filename: &#39;bundle.js&#39; } } 报错： ERROR in ./node_modules/antd/lib/button/style/index.cssModule parse failed: /home/johnny/Project/react/demo3/node_modules/antd/lib/button/style/index.css Unexpected token (1:0)You may need an appropriate loader to handle this file type. 找到解决办法是，分别处理node_modules(ant design)中的css和css_modules： var webpack = require(&#39;webpack&#39;); var path = require(&#39;path&#39;); module.exports = { context: __dirname+&#39;/src&#39;, entry: &quot;./js/index.js&quot;, module: { rules: [ { test: /\\.js?$/, exclude: /(node_modules)/, use: { loader: &#39;babel-loader&#39;, options: { presets: [&#39;react&#39;,&#39;es2015&#39;], plugins: [[&#39;import&#39;,{&#39;libraryName&#39;:&#39;antd&#39;,&#39;style&#39;:&#39;css&#39;}]] } } }, // css_modules 处理方式 { test: /\\.css$/, exclude: /(node_modules)/, use: [ {loader:&#39;style-loader&#39;}, { loader: &#39;css-loader&#39;, options: { modules: true, loacalIdentName: &#39;[name]__[local]_[hash:base64:5]&#39;, sourceMap: true, importLoaders: 1 } } ] }, // ant design 处理方式 { test: /\\.css$/, include: path.resolve(__dirname, &#39;node_modules&#39;), use: [ {loader:&#39;style-loader&#39;}, { loader:&#39;css-loader&#39;, } ] }, ] }, output: { path: __dirname+&#39;/src&#39;, filename: &#39;bundle.js&#39; } }","tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"react-native学习日记之TabNavigator","date":"2017-02-27T05:11:59.000Z","path":"2017/02/27/react-native学习日记之TabNavigator/","text":"安卓中不能像IOS一样有NavigatorIOS和tabBarIOS，如果需要跨平台实现类似的功能，必须要借助第三方组件如https://github.com/exponent/react-native-tab-navigator 安装： npm install react-native-tab-navigator 使用： import TabNavigator from &#39;react-native-tab-navigator&#39; 这个组件的使用方式类似于TabBarIOS，配合Navigator一起使用就可以到达跨平台的效果了 import React, { Component } from &#39;react&#39;; import { AppRegistry, StyleSheet, Text, View, Image, Navigator } from &#39;react-native&#39;; import TabNavigator from &#39;react-native-tab-navigator&#39;; import HomeView from &#39;./Components/homeView.js&#39;; import ProfileView from &#39;./Components/profileView.js&#39;; var icons=[ require(&#39;./imgs/tabbar_1.png&#39;), require(&#39;./imgs/tabbar_2.png&#39;), require(&#39;./imgs/tabbar_3.png&#39;), require(&#39;./imgs/tabbar_4.png&#39;) ]; var pressIcons = [ require(&#39;./imgs/tabbar_1_press.png&#39;), require(&#39;./imgs/tabbar_2_press.png&#39;), require(&#39;./imgs/tabbar_3_press.png&#39;), require(&#39;./imgs/tabbar_4_press.png&#39;) ] export default class TabNavigatorDemo extends Component { constructor(props) { super(props); this.state={ selectedTab:&#39;home&#39; } } render() { let defaultName = &#39;HomeView&#39;; let defaultComponent = HomeView; return ( &lt;View style={{flex:1}}&gt; &lt;TabNavigator tabBarStyle={styles.tabBarStyle}&gt; &lt;TabNavigator.Item selected={this.state.selectedTab === &#39;home&#39;} title=&quot;Home&quot; renderIcon={() =&gt; &lt;Image style={styles.iconStyle} source={icons[0]} /&gt;} renderSelectedIcon={() =&gt; &lt;Image style={styles.iconStyle} source={pressIcons[0]} /&gt;} badgeText=&quot;1&quot; onPress={() =&gt; this.setState({ selectedTab: &#39;home&#39; })}&gt; &lt;Navigator initialRoute={{name:defaultName,component:defaultComponent}} configureScene={(route)=&gt;{ return Navigator.SceneConfigs.VerticalDownSwipeJump; }} renderScene={(route,navigator)=&gt;{ // console.log(route,navigator); let Component = route.component; return &lt;Component {...route.params} navigator={navigator} /&gt; }} navigationBar={ &lt;Navigator.NavigationBar routeMapper={{ LeftButton: (route,navigator,index,navState)=>{ return (前进); }, Title: (route,navigator,index,navState)=>{ return (首页); }, RightButton: (route, navigator, index, navState) => {}, }} /&gt; } /&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected={this.state.selectedTab === &#39;profile&#39;} title=&quot;Profile&quot; renderIcon={() =&gt; &lt;Image style={styles.iconStyle} source={icons[1]} /&gt;} renderSelectedIcon={() =&gt; &lt;Image style={styles.iconStyle} source={pressIcons[1]} /&gt;} // renderBadge={() =&gt; &lt;CustomBadgeView /&gt;} onPress={() =&gt; this.setState({ selectedTab: &#39;profile&#39; })}&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected={this.state.selectedTab === &#39;favor&#39;} title=&quot;favor&quot; renderIcon={() =&gt; &lt;Image style={styles.iconStyle} source={icons[2]} /&gt;} renderSelectedIcon={() =&gt; &lt;Image style={styles.iconStyle} source={pressIcons[2]} /&gt;} // renderBadge={() =&gt; &lt;CustomBadgeView /&gt;} onPress={() =&gt; this.setState({ selectedTab: &#39;favor&#39; })}&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected={this.state.selectedTab === &#39;me&#39;} title=&quot;me&quot; renderIcon={() =&gt; &lt;Image style={styles.iconStyle} source={icons[3]} /&gt;} renderSelectedIcon={() =&gt; &lt;Image style={styles.iconStyle} source={pressIcons[3]} /&gt;} // renderBadge={() =&gt; &lt;CustomBadgeView /&gt;} onPress={() =&gt; this.setState({ selectedTab: &#39;me&#39; })}&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;/TabNavigator&gt; &lt;/View&gt; ); } } const styles = StyleSheet.create({ tabBarStyle: { // backgroundColor:&#39;red&#39; }, iconStyle: { width:20, height:20 } }); AppRegistry.registerComponent(&#39;TabNavigatorDemo&#39;, () =&gt; TabNavigatorDemo);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之tabBar","date":"2017-02-22T03:44:59.000Z","path":"2017/02/22/react-native学习日记之tabBar/","text":"IOS 上可以使用tabBarIOS组件实现底栏tabBar，但是安卓不行。不过可以借助第三方组件实现类似的功能react-native-tab-view 基本用法如下 import React, { Component } from &#39;react&#39;; import { AppRegistry, StyleSheet, Text, View } from &#39;react-native&#39;; import {TabViewAnimated,TabBar} from &#39;react-native-tab-view&#39;; export default class tabView extends Component { state = { index: 0, routes: [ { key: &#39;1&#39;, title: &#39;First&#39; }, { key: &#39;2&#39;, title: &#39;Second&#39; }, ], }; _handleChangeTab = (index) =&gt; { this.setState({index}); }; _renderHeader = (props) =&gt; { console.log(TabBar); return &lt;TabBar {...props} style={styles.tabBar}/&gt; }; _renderFooter = (props) =&gt; { console.log(TabBar); return &lt;TabBar {...props} style={styles.tabBar} indicatorStyle={{backgroundColor:'transparent'}}/&gt; }; _renderScene = ({route}) =&gt; { switch (route.key) { case &#39;1&#39;: return &lt;View style={[styles.page,{backgroundColor:&#39;#ff4081&#39;}]}&gt; &lt;Text&gt; 第一页 &lt;/Text&gt; &lt;/View&gt; case &quot;2&quot;: return &lt;View style={[styles.page,{backgroundColor:&#39;#673ab7&#39;}]}&gt; &lt;Text&gt; 第二页 &lt;/Text&gt; &lt;/View&gt; default: return null; } }; render() { return ( &lt;TabViewAnimated style={styles.container} navigationState={this.state} renderScene={this._renderScene} renderHeader={this._renderHeader} // renderFooter={this._renderFooter} onRequestChangeTab={this._handleChangeTab} /&gt; ); } } const styles = StyleSheet.create({ container: { flex: 1, }, page: { flex: 1, alignItems: &#39;center&#39;, justifyContent: &#39;center&#39;, }, }); AppRegistry.registerComponent(&#39;tabView&#39;, () =&gt; tabView);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"atom package清单","date":"2017-02-19T07:35:16.000Z","path":"2017/02/19/atom-package清单/","text":"做个备份 Community Packages (32) /home/johnny/.atom/packages ├── atom-material-syntax@1.0.2 ├── atom-material-ui@1.3.9 ├── atom-react-native-autocomplete@0.0.27 ├── atom-react-native-css@1.1.3 ├── atom-ternjs@0.17.0 ├── autoclose-html@0.23.0 ├── autocomplete-modules@1.6.7 ├── autocomplete-paths@1.0.5 ├── autoprefixer@3.6.1 ├── color-picker@2.2.5 ├── emmet@2.4.3 ├── file-icons@2.0.15 ├── fold-functions@0.5.0 ├── highlight-selected@0.12.0 ├── jquery-snippets@11.0.0 ├── language-babel@2.54.1 ├── language-javascript-jsx@0.3.7 ├── linter@1.11.21 ├── linter-csslint@1.3.3 ├── linter-htmlhint@1.3.1 ├── linter-js-standard-jsx@4.1.2 ├── linter-jshint@3.0.2 ├── markdown-preview-plus@2.4.1 ├── markdown-scroll-sync@2.1.2 ├── markdown-table-formatter@2.8.4 ├── minimap@4.26.8 ├── minimap-highlight-selected@4.5.0 ├── nuclide@0.205.0 ├── pigments@0.39.0 ├── react@0.16.2 ├── react-es6-snippets@0.3.0 └── run-in-browser@0.1.3","tags":[{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}]},{"title":"react-native学习日记之ListView三","date":"2017-02-19T06:42:05.000Z","path":"2017/02/19/react-native学习日记之ListView三/","text":"ListView with SectionHeader要实现拥有section header 的ListView，需要dataBlob数据结构和renderSectionHeader 属性 dataBlobdataBlob是一个数据结构（通常是一个对象），包含了渲染ListView的所有数据。其中包括Section Header 数据和每个行Row的行数据Row Data。要获得dataBlob中的数据，首先要实现遍历方法(getSectionData 和 getRowData) dataBlob结构： 实现getSectionData 和 getRowData constructor(props) { super(props); var getSectionData = (dataBlob,sectionID) =&gt; { return dataBlob[sectionID]; } var getRowData = (dataBlob,sectionID,rowID) =&gt; { return dataBlob[sectionID+&#39;:&#39;+rowID]; } this.state = { dataSource: new ListView.DataSource({ getSectionData:getSectionData, getRowData:getRowData, rowHasChanged: (r1,r2)=&gt;r1!==r2, sectionHeaderHasChanged:(s1,s2)=&gt;s1!==s2 }) } } 处理外部json数据，生成dataBlobjson数据如下 { &quot;data&quot;: [ { &quot;images&quot;: [ { &quot;icon&quot;: &quot;a&quot;, &quot;name&quot;: &quot;路飞&quot; }, { &quot;icon&quot;: &quot;b&quot;, &quot;name&quot;: &quot;阿里&quot; }, { &quot;icon&quot;: &quot;c&quot;, &quot;name&quot;: &quot;。。。&quot; }, { &quot;icon&quot;: &quot;d&quot;, &quot;name&quot;: &quot;风景&quot; }, { &quot;icon&quot;: &quot;e&quot;, &quot;name&quot;: &quot;女神(づ￣ 3￣)づ&quot; } ], &quot;title&quot;: &quot;B&quot; }, { &quot;images&quot;: [ { &quot;icon&quot;: &quot;a&quot;, &quot;name&quot;: &quot;路飞&quot; }, { &quot;icon&quot;: &quot;b&quot;, &quot;name&quot;: &quot;阿里&quot; }, { &quot;icon&quot;: &quot;c&quot;, &quot;name&quot;: &quot;。。。&quot; }, { &quot;icon&quot;: &quot;d&quot;, &quot;name&quot;: &quot;风景&quot; }, { &quot;icon&quot;: &quot;e&quot;, &quot;name&quot;: &quot;女神(づ￣ 3￣)づ&quot; } ], &quot;title&quot;: &quot;B&quot; }, ... ] } loadDataFromJson() { var data = require(&#39;./data.json&#39;).data; console.log(data); var dataBlob = {}, sectionIDs = []; //存放组ID的数组 rowIDs = []; //存放行ID的数组 rows = []; //存放行数据数组 for(var i=0,l=data.length;i&lt;l;i++) { // 1.把section id 放入sectionID数组中 var sectionID = i; // sectionIDs.push(sectionID); sectionIDs.push(i); //sectionID 不一定必须是i：0,1,2,3... // 2. 把组中内容放入dataBlob中 // 相当于dataBlob[SectionID]=data[i].title dataBlob[i]=data[i].title; // 3. 取出该数组中所有的行数据 rows = data[i].images; // 4. 记录每一行中的数据 rowIDs[i]=[]; // 5. 获取行中每一组数据 for(var j=0,lr=rows.length;j&lt;lr;j++){ // 把行号放入rowIDs中 rowIDs[i].push(j); // 把每一行中的内容放如dataBlob对象中 dataBlob[i+&#39;:&#39;+j] = rows[j]; } } console.log(dataBlob,sectionIDs,rowIDs); this.setState({ dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs) }); } 可以看到将dataBlob，sectionIDs，rowIDs打印出来是如下结果 完整代码 /** * 吸顶效果 */ import React, { Component } from &#39;react&#39;; import { AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image, } from &#39;react-native&#39;; export default class ListViewSectionHeader extends Component { constructor(props) { super(props); var getSectionData = (dataBlob,sectionID) =&gt; { return dataBlob[sectionID]; } var getRowData = (dataBlob,sectionID,rowID) =&gt; { return dataBlob[sectionID+&#39;:&#39;+rowID]; } this.state = { dataSource: new ListView.DataSource({ getSectionData:getSectionData, getRowData:getRowData, rowHasChanged: (r1,r2)=&gt;r1!==r2, sectionHeaderHasChanged:(s1,s2)=&gt;s1!==s2 }) } } render() { return ( &lt;ListView dataSource={this.state.dataSource} renderRow={this.renderRow} renderSectionHeader={this.renderSectionHeader} /&gt; ); } componentDidMount() { this.loadDataFromJson(); } loadDataFromJson() { var data = require(&#39;./data.json&#39;).data; console.log(data); var dataBlob = {}, sectionIDs = []; //存放组ID的数组 rowIDs = []; //存放行ID的数组 rows = []; //存放行数据数组 for(var i=0,l=data.length;i&lt;l;i++) { // 1.把section id 放入sectionID数组中 var sectionID = i; // sectionIDs.push(sectionID); sectionIDs.push(i); //sectionID 不一定必须是i：0,1,2,3... // 2. 把组中内容放入dataBlob中 // 相当于dataBlob[SectionID]=data[i].title dataBlob[i]=data[i].title; // 3. 取出该数组中所有的行数据 rows = data[i].images; // 4. 记录每一行中的数据 rowIDs[i]=[]; // 5. 获取行中每一组数据 for(var j=0,lr=rows.length;j&lt;lr;j++){ // 把行号放入rowIDs中 rowIDs[i].push(j); // 把每一行中的内容放如dataBlob对象中 dataBlob[i+&#39;:&#39;+j] = rows[j]; } } console.log(dataBlob,sectionIDs,rowIDs); this.setState({ dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs) }); } renderRow(owData,sectionID,rowID,highlightRow) { console.log(owData); return( &lt;TouchableOpacity activeOpacity={0.5}&gt; &lt;View style={styles.innerViewStyle}&gt; &lt;Image source={{uri:owData.icon}} style={styles.iconStyle}/&gt; &lt;Text style={styles.descStyle}&gt; {owData.name} &lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); } renderSectionHeader(sectionData,sectionID) { return( &lt;View style={styles.secHeaderStyle}&gt; &lt;Text&gt; {sectionData} &lt;/Text&gt; &lt;/View&gt; ); } } const styles = StyleSheet.create({ innerViewStyle: { flexDirection:&#39;row&#39; }, iconStyle: { width: 100, height: 100, }, descStyle: { fontSize: 20, alignSelf:&#39;center&#39;, marginLeft:20 }, secHeaderStyle: { height:30, justifyContent:&#39;center&#39;, paddingLeft:10, backgroundColor:&quot;#ede1e1&quot; } }); AppRegistry.registerComponent(&#39;ListViewSectionHeader&#39;, () =&gt; ListViewSectionHeader); 最终效果很难看，不过实现方式没错就行啦","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"ubuntu 14.04配置","date":"2017-02-17T15:05:15.000Z","path":"2017/02/17/ubuntu配置/","text":"最近又尝试从Windows 切换到 ubuntu 。经过很多次折腾，发现自己对linux 有了一定的理解过后再去接触这些，已经不再那么陌生和“恐惧”了 安装Windows 10 和 ubuntu 共存安装参考 切换显卡系统设置–&gt; 软件和更行 –&gt; 附加驱动（据说开源驱动性能虽然不强，但是稳定性好，我还是继续用开源驱动吧） 换主题unity乳齿便秘的默认主题真的让我第一次开机看到它过后就想换掉！ubuntu14.04的主题很多不是扁平化的，如果电脑支持的话还是安装16.04比较好（该死的联想z485） 首先安装unity-tweak-tool sudo apt install unity-tweak-tool 然后推荐去noobSlab，这个网站有很多个主题可以选择，安装方式也写出来了，配合unity-tweak-tool使用。个人喜欢Numix主题 安装搜狗输入法去搜狗官网下载linux 版本搜狗，然后双击安装，完毕后。系统设置–&gt;语言支持–&gt;键盘输入方式系统：fcitx–&gt;重启 如果发现安装好后不能调出输入法面板，输入时只能看不到候选词，那么可以检查一下依赖sudo apt-get install -f 如果使用一段时间过后搜狗输入法一直崩溃,可能是配置文件出问题了，可以选择删除配置文件，然后重启fctix killall fctix rm -rf ~/.config/sogou-qimpanel rm -rf ~/.config/SogouPY.users rm -rf ~/.config/SogouPY fctix 安装cairo-dock很实用的小工具（模拟mac的dock栏） sudo add-apt-repository ppa:cairo-dock-team/ppa sudo apt-get update sudo apt-get install cairo-dock # 启动命令 cairo-dock 第一次打开会提示是否开启OpenGl，我的电脑上面测试开启过后会出问题，我选择不开启，如果以后想开启，可以使用cairo-dock -c（不开启） / cario-dock -o（开启OpenGl）切换 安装shadowsocks-qt5“纸飞机”这个东西还是必须要有的啊，没有这个东西感觉整个人都不好了 sudo add-apt-repository ppa:hzwhuang/ss-qt5 sudo apt-get update sudo apt-get install shadowsocks-qt5 #启动命令 ss-qt5 安装proxychain4ss-qt5 是桌面级应用，尽管连上代理，命令行还是无法通过代理上网。proxychain 可以完美解决命令行不能使用代理的问题 git clone https://github.com/rofl0r/proxychains-ng.git cd proxychains-ng ./configure (sudo) make &amp;&amp; make instal 安装完毕后，需要手动新建配置文件 sudo vi /etc/proxychains.conf #然后填入以下内容 [ProxyList] socks5 127.0.0.1 1080 使用方法 proxychains (sudo) 需要执行的命令 ... 为firefox 和 chrome 安装flash首先进入系统设置–&gt;软件和更行–&gt;其它软件–&gt;勾选Canonial合作伙伴，然后运行命令 sudo apt install adobe-flashplugin 安装atomatom 是一款非常优秀的编辑器，不解释。由于官方网站没有提供32bit deb包（64bit无视），因此需要自行通过ppa安装 sudo add-apt-repository ppa:webupd8team/atom sudo apt-get update sudo apt-get install atom 安装nodejs 最新版（较新版）到https://nodejs.org/download/release/v7.5.0/ 去下载最新的nodejs包我这里选择node-v7.5.0-linux-x86.tar.gz下载下来过后，执行 tar -zxvf node-v7.5.0-linux-x86.tar.gz cp node-v7.5.0-linux-x86 /opt/node-v7.5.0 sudo ln -s /opt/node-v7.5.0/bin/node /usr/local/bin/node sudo ln -s /opt/node-v7.5.0/bin/npm /usr/local/bin/npm 现在可以使用node 和npm命令了，接下载就是配置npm 全局安装路径了（可以不用配置） npm config set prefix &quot;/home/johnny/.npm-global/&quot; # 使用npm config get prefix 可以查看全局安装路径 还没完，这时候npm install xxx -g 过后会发现执行xxx命令无效。比如说安装hexo， npm install hexo -g成功后，执行hexo却提示command not found。配置一下环境变量就可以解决这个问题 echo -e &quot;export PATH=$(npm prefix -g)/bin:$PATH&quot; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc 安装oracle-jdk首先下载jdk然后解压,我将他解压到了~/jdk1.8.0_121/,如果只是当前用户用的话，直接改.bashrc文件中配置环境变量就好了，不过建议写到/etc/profile中 vi ~/.bashrc #在最末尾加入 export JAVA_HOME=/home/johnny/jdk1.8.0_121 ## 这里要注意目录要换成自己解压的jdk 目录 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH 然后 source ~/.bashrc java -version 就可以看到java版本已经变成安装的版本了 安卓开发环境搭建https://developer.android.com/studio/index.html下载好sdk，解压到自己想解压的目录，我这里解压到/home/johnny/sdk然后配置环境变量 vi ~/.bashrc #在最末尾加入 export ANDROID_HOME=/home/johnny/Johnny/sdk export PATH=${PATH}:${ANDROID_HOME}/tools export PATH=${PATH}:${ANDROID_HOME}/platform-tools 现在执行android 就可以打开sdk 管理器了，下载自己需要的package就行了。但是由于现在的sdk版本高了，默认是64位，所以32位ubuntu在运行adb命令时就会报错。file adb 也可以看到adb是64位的。解决方案就是将platform-tools 替换成32位的老版本，替换后就可以成功运行adb命令了 最终效果","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://yoursite.com/tags/ubuntu/"}]},{"title":"react-native学习日记之ListView","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView/","text":"react-native ListView DOC ListView 基本用法//es5 写法 var ListViewDemo = React.createClass({ getInitialState() { // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource({rowHasChanged:(r1,r2)=&gt;r1!==r2}); // 1.2 设置返回数据 return { //listData 为一个数组格式 dataSource: ds.cloneWithRows(listData) } }, // 设置render函数 render() { return ( &lt;ListView dataSource={this.state.dataSource} renderRow={this.renderListView} //this.renderListView后不加括号表示默认接受所有参数（owData，sectionID...) /&gt; ); }, renderListView(owData, sectionID, rowID, highlightRow) { //renderRow 回调函数 } } //es6 写法 class MyComponent extends Component { constructor() { super(); const ds = new ListView.DataSource({rowHasChanged: (r1, r2) =&gt; r1 !== r2}); this.state = { dataSource: ds.cloneWithRows(listData), }; } render() { return ( &lt;ListView dataSource={this.state.dataSource} renderRow={this.renderListView} /&gt; ); } } 完整demo/** * Sample React Native App * https://github.com/facebook/react-native * @flow */ import React, { Component } from &#39;react&#39;; import { AppRegistry, StyleSheet, Text, View, ListView, Image, TouchableOpacity, Alert } from &#39;react-native&#39;; var listData = [ { src:&#39;a&#39;, desc:&#39;第一张&#39; }, { src:&#39;b&#39;, desc:&#39;第二张&#39; }, { src:&#39;c&#39;, desc:&#39;第三张&#39; }, { src:&#39;d&#39;, desc:&#39;第四张&#39; }, { src:&#39;e&#39;, desc:&#39;第五张&#39; }, { src:&#39;b&#39;, desc:&#39;第二张&#39; }, { src:&#39;c&#39;, desc:&#39;第三张&#39; }, { src:&#39;d&#39;, desc:&#39;第四张&#39; }, { src:&#39;e&#39;, desc:&#39;第五张&#39; } ]; var ListViewDemo = React.createClass({ getInitialState() { // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource({rowHasChanged:(r1,r2)=&gt;r1!==r2}); // 1.2 设置返回数据 return { dataSource: ds.cloneWithRows(listData) } }, // 设置render函数 render() { return ( &lt;ListView dataSource={this.state.dataSource} renderRow={this.renderListView} renderSeparator={(sectionID, rowID, adjacentRowHighlighted)=&gt;{ return ( &lt;View key={`${sectionID}-${rowID}`} style={{height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'}} &gt;&lt;/View&gt; ); }} /&gt; ); }, // renderRow的回调函数 renderListView(owData, sectionID, rowID, highlightRow) { return ( &lt;TouchableOpacity activeOpacity={0.5} onPress={()=&gt;highlightRow(sectionID,rowID)}&gt; &lt;View style={styles.cellViewStyle}&gt; {/*左边的图片src*/} &lt;Image source={{uri:owData.src}} style={{width:100,height:100,marginRight:15,borderRadius:50}}/&gt; {/*右边的图片描述desc*/} &lt;View style={styles.descStyle}&gt; &lt;Text&gt; {owData.desc} &lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); } }) const styles = StyleSheet.create({ cellViewStyle: { // borderBottomWidth: 1, // borderBottomColor: &#39;#eeeeee&#39;, flexDirection:&#39;row&#39;, }, descStyle: { flexDirection:&#39;row&#39;, alignItems:&#39;center&#39; } }); AppRegistry.registerComponent(&#39;ListViewDemo&#39;, () =&gt; ListViewDemo); 运行效果初始状态。onPress触发后 注意cloneWithRows接受一个数组renderRow，hightlightRow &amp; renderSeparator renderRow 的回调函数可以接受4个参数，分别是数据，区块id，行id，highlightRow回调函数 其中hightlightRow的用法文档里面写的不是很明白。搜了一下，发现是这样用的 http://stackoverflow.com/questions/36000842/how-do-i-call-highlightrow-of-listview-renderrow 大致过程是这样的，如果触发了hightlightRow(sectionID,rowID)函数，则会将该sectionID，rowID相应的单元行的标记为highlighted。而renderSeparator会检查每一个row的相邻row的highlight情况，也就是adjacentRowHighlighted 的真假。adjacentRowHighlighted默认为false 文档对renderSeparator的解释 renderSeparator function #(sectionID, rowID, adjacentRowHighlighted) =&gt; renderable如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。在其上方的小节ID和行ID，以及邻近的行是否被高亮会作为参数传递进来。 (sectionID, rowID, adjacentRowHighlighted) =&gt; renderableIf provided, a renderable component to be rendered as the separator below each row but not the last row if there is a section header below. Take a sectionID and rowID of the row above and whether its adjacent row is highlighted. &lt;View key={`${sectionID}-${rowID}`} style={{height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'}} &gt;&lt;/View&gt; 这块代码表示了当adjacentRowHighlighted为true时，该view（分割线）的颜色为蓝色。 另外 http://wiki.jikexueyuan.com/project/react-native/image.htm &lt;Image source={{uri:...}}/&gt; 中的uri的用法","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之ListView二","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView二/","text":"用listView实现九宫格效果这次时照着es6的写法写的，es6和es5的写法有很多地方不一样 import React, { Component } from &#39;react&#39;; import { AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image } from &#39;react-native&#39;; import Dimensions from &#39;Dimensions&#39;; const listData = [ { src:&#39;a&#39;, desc:&#39;第一张&#39; }, { src:&#39;b&#39;, desc:&#39;第二张&#39; }, { src:&#39;c&#39;, desc:&#39;第三张&#39; }, { src:&#39;d&#39;, desc:&#39;第四张&#39; }, { src:&#39;e&#39;, desc:&#39;第五张&#39; }, { src:&#39;b&#39;, desc:&#39;第二张&#39; }, { src:&#39;c&#39;, desc:&#39;第三张&#39; }, { src:&#39;d&#39;, desc:&#39;第四张&#39; }, { src:&#39;e&#39;, desc:&#39;第五张&#39; } ]; // 获取屏幕宽高 var {width,height} = Dimensions.get(&#39;window&#39;); var cols = 3; //3列 var cellWidth = 100,cellHeight = 100; var vMargin = (width-cols*cellWidth)/(cols+1); //九宫格横向margin算法 var hMargin = 20; //九宫格纵向margin export default class ListViewjiugongge extends Component { constructor(props) { super(props); const ds = new ListView.DataSource({rowHasChanged:(r1,r2)=&gt;r1!==r2}); this.state = { dataSource: ds.cloneWithRows(listData) } } render() { return ( &lt;ListView dataSource={this.state.dataSource} renderRow={this.renderRow} // renderSeparator={(sectionID,rowID,adjacentRowHighlighted)=&gt;{ // console.log(sectionID,rowID,adjacentRowHighlighted); // return( // &lt;View key={`${sectionID}-${rowID}`} // style={{height:90,width:1,backgroundColor:adjacentRowHighlighted?'blue':'red'}} // &gt;&lt;/View&gt; // ) // }} contentContainerStyle={styles.listViewStyle} /&gt; ); } renderRow(owData,sectionID,rowID,highlightRow) { return( &lt;TouchableOpacity activeOpacity={0.5} onPress={()=&gt;{highlightRow(sectionID,rowID)}}&gt; &lt;View style={styles.cellViewStyle}&gt; {/*图片src*/} &lt;Image source={{uri:owData.src}} style={{width:100,height:100,borderRadius:50}}/&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) } } const styles = StyleSheet.create({ listViewStyle: { flexDirection:&#39;row&#39;, flexWrap:&#39;wrap&#39;, alignItems:&#39;flex-start&#39; }, cellViewStyle: { marginLeft:vMargin, marginTop: hMargin }, descStyle: { // flexDirection:&#39;row&#39;, // alignItems:&#39;center&#39; } }); AppRegistry.registerComponent(&#39;ListViewjiugongge&#39;, () =&gt; ListViewjiugongge);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native 学习日记之ScrollView","date":"2017-02-07T09:44:54.000Z","path":"2017/02/07/学习日记/","text":"使用ScrollView 实现轮播效果还行 import React, { Component } from &#39;react&#39;; import { AppRegistry, StyleSheet, Text, View, Image, ScrollView } from &#39;react-native&#39;; var Images = require(&#39;./images.json&#39;); import Dimensions from &#39;Dimensions&#39;; import TimerMixin from &#39;react-timer-mixin&#39;; var width = Dimensions.get(&#39;window&#39;).width; var ScrollViewProject = React.createClass({ mixins:[TimerMixin], getInitialState() { return { currentPage:0 } }, render() { return( &lt;View style={styles.container}&gt; {/*轮播*/} &lt;ScrollView ref=&#39;scrollView&#39; horizontal={true} showsHorizontalScrollIndicator={false} pagingEnabled={true} onScroll={(e)=&gt;this.changeIndicators(e)} onScrollBeginDrag={this.onScrollBeginDrag} onScrollEndDrag={this.onScrollEndDrag} &gt; {this.renderAllImage()} &lt;/ScrollView&gt; {/*轮播指示器*/} &lt;View style={styles.indicators}&gt; {this.renderIndicator()} &lt;/View&gt; &lt;/View&gt; ); }, componentDidMount() { // this.setInterval( // ()=&gt;console.log(&#39;testTimeout&#39;),1000 // ); // 开启定时器 this.startTimer(); }, renderAllImage() { var allImgs = []; var imgData = Images.data; var srcs = [ require(&quot;./imgs/a.jpg&quot;), require(&quot;./imgs/b.jpg&quot;), require(&quot;./imgs/c.jpg&quot;), require(&quot;./imgs/d.jpg&quot;), require(&quot;./imgs/e.jpg&quot;) ]; for(let i=0;i&lt;imgData.length;i++) { allImgs.push( &lt;Image key={i} source={srcs[i]} style={{width:width,height:180}} /&gt; ) } return allImgs; }, renderIndicator() { var indicators = []; for(let i=0;i&lt;5;i++) { let style = (i==this.state.currentPage)?{color:&#39;#ffff00&#39;}:{color:&#39;#ffffff&#39;} indicators.push( &lt;Text key={i} style={[{fontSize:30,marginLeft:5},style]}&gt;&amp;bull;&lt;/Text&gt; ) } return indicators; }, changeIndicators(e) { var offsetX = e.nativeEvent.contentOffset.x; this.setState({ currentPage:Math.floor(offsetX/width) }) }, // 设置轮播自动滚动 startTimer() { // 1. 拿到scrollView var scrollView = this.refs.scrollView; // 2. 添加定时器 this.timer = this.setInterval(()=&gt;{ // console.log(&#39;haha&#39;); // 2.1 设置圆点 var activePage; // 2.2 判断 if(this.state.currentPage+1 &gt;=5) activePage=0; else activePage=this.state.currentPage+1; // 2.3 更新状态 this.setState({ currentPage:activePage }) // 2.4 让scroll滚动起来 var offsetX = activePage * width; scrollView.scrollResponderScrollTo({x:offsetX,y:0,animated:true}); },1000); }, // 拖动轮播时停止定时器 onScrollBeginDrag() { this.clearInterval(this.timer); }, // 拖动结束后打开定时器 onScrollEndDrag() { this.startTimer(); } }); const styles = StyleSheet.create({ container: { // flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39;, backgroundColor: &#39;#F5FCFF&#39;, // marginTop:20 }, indicators: { flexDirection:&#39;row&#39;, backgroundColor:&#39;rgba(0,0,0,0.1)&#39;, height:30, width:width, alignItems:&#39;center&#39;, marginTop:-30 } }); AppRegistry.registerComponent(&#39;ScrollViewProject&#39;, () =&gt; ScrollViewProject);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"'Generator 执行顺序'","date":"2016-12-26T04:13:50.000Z","path":"2016/12/26/Generator/","text":"generator 不同于普通的函数，执行方式有区别 function* foo() { yield 1; console.log(yield); } let fooObj = foo(); console.log(fooObj.next()); console.log(fooObj.next()); console.log(fooObj.next()); 第一个fooObj.next() 返回Object {value: 1, done: false}此时fooObj指针指向的是yield 1(第一个yield) 第二次运行fooObj.next(), 指针指向console.log(yield)中的yield即第二个yeild,此时函数返回Object {value: undefined, done: false} 第三次运行fooObj.next(), 指针继续向后移动,开始执行console.log(yield)语句,由于next参数为undefined,则指定上一次(即第二次yeild)yeild为undefined所以打印出undefined 和 Object {value: undefined, done: true}","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}]}]