[{"title":"ubuntu 14.04配置","date":"2017-02-17T15:05:15.000Z","path":"2017/02/17/ubuntu配置/","text":"最近又尝试从Windows 切换到 ubuntu 。经过很多次折腾，发现自己对linux 有了一定的理解过后再去接触这些，已经不再那么陌生和“恐惧”了 安装Windows 10 和 ubuntu 共存安装参考 切换显卡系统设置–&gt; 软件和更行 –&gt; 附加驱动（据说开源驱动性能虽然不强，但是稳定性好，我还是继续用开源驱动吧） 换主题unity乳齿便秘的默认主题真的让我第一次开机看到它过后就想换掉！ubuntu14.04的主题很多不是扁平化的，如果电脑支持的话还是安装16.04比较好（该死的联想z485）。 首先安装unity-tweak-tool1sudo apt install unity-tweak-tool 然后推荐去noobSlab，这个网站有很多个主题可以选择，安装方式也写出来了，配合unity-tweak-tool使用。个人喜欢Numix主题 安装cairo-dock很实用的小工具（模拟mac的dock栏）1234sudo add-apt-repository ppa:cairo-dock-team/ppasudo apt-get updatesudo apt-get install cairo-dock# 启动命令 cairo-dock 第一次打开会提示是否开启OpenGl，我的电脑上面测试开启过后会出问题，我选择不开启，如果以后想开启，可以使用cairo-dock -c（不开启） / cario-dock -o（开启OpenGl）切换 安装shadowsocks-qt5“纸飞机”这个东西还是必须要有的啊，没有这个东西感觉整个人都不好了1234sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5#启动命令 ss-qt5 安装proxychain4ss-qt5 是桌面级应用，尽管连上代理，命令行还是无法通过代理上网。proxychain 可以完美解决命令行不能使用代理的问题1234git clone https://github.com/rofl0r/proxychains-ng.gitcd proxychains-ng./configure(sudo) make &amp;&amp; make instal 安装完毕后，需要手动新建配置文件12345sudo vi /etc/proxychains.conf#然后填入以下内容[ProxyList]socks5 127.0.0.1 1080 使用方法1proxychains (sudo) 需要执行的命令 ... 安装atomatom 是一款非常优秀的编辑器，不解释。由于官方网站没有提供32bit deb包（64bit无视），因此需要自行通过ppa安装123sudo add-apt-repository ppa:webupd8team/atom sudo apt-get update sudo apt-get install atom 安装nodejs 最新版（较新版）到https://nodejs.org/download/release/v7.5.0/ 去下载最新的nodejs包我这里选择node-v7.5.0-linux-x86.tar.gz下载下来过后，执行1234tar -zxvf node-v7.5.0-linux-x86.tar.gzcp node-v7.5.0-linux-x86 /opt/node-v7.5.0sudo ln -s /opt/node-v7.5.0/bin/node /usr/local/bin/nodesudo ln -s /opt/node-v7.5.0/bin/npm /usr/local/bin/npm 现在可以使用node 和npm命令了，接下载就是配置npm 全局安装路径了（可以不用配置）12npm config set prefix \"/home/johnny/.npm-global/\"# 使用npm config get prefix 可以查看全局安装路径 还没完，这时候npm install xxx -g 过后会发现执行xxx命令无效。比如说安装hexo， npm install hexo -g成功后，执行hexo却提示command not found。配置一下环境变量就可以解决这个问题1echo -e \"export PATH=$(npm prefix -g)/bin:$PATH\" &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://yoursite.com/tags/ubuntu/"}]},{"title":"react-native学习日记之ListView","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView/","text":"react-native ListView DOC ListView 基本用法1234567891011121314151617181920212223242526//es5 写法var ListViewDemo = React.createClass(&#123; getInitialState() &#123; // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); // 1.2 设置返回数据 return &#123; //listData 为一个数组格式 dataSource: ds.cloneWithRows(listData) &#125; &#125;, // 设置render函数 render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; //this.renderListView后不加括号表示默认接受所有参数（owData，sectionID...) /&gt; ); &#125;, renderListView(owData, sectionID, rowID, highlightRow) &#123; //renderRow 回调函数 &#125;&#125; 12345678910111213141516171819//es6 写法class MyComponent extends Component &#123; constructor() &#123; super(); const ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows(listData), &#125;; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; /&gt; ); &#125;&#125; 完整demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, Image, TouchableOpacity, Alert&#125; from 'react-native';var listData = [ &#123; src:'a', desc:'第一张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;];var ListViewDemo = React.createClass(&#123; getInitialState() &#123; // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); // 1.2 设置返回数据 return &#123; dataSource: ds.cloneWithRows(listData) &#125; &#125;, // 设置render函数 render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; renderSeparator=&#123;(sectionID, rowID, adjacentRowHighlighted)=&gt;&#123; return ( &lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; style=&#123;&#123;height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125; &gt;&lt;/View&gt; ); &#125;&#125; /&gt; ); &#125;, // renderRow的回调函数 renderListView(owData, sectionID, rowID, highlightRow) &#123; return ( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125; onPress=&#123;()=&gt;highlightRow(sectionID,rowID)&#125;&gt; &lt;View style=&#123;styles.cellViewStyle&#125;&gt; &#123;/*左边的图片src*/&#125; &lt;Image source=&#123;&#123;uri:owData.src&#125;&#125; style=&#123;&#123;width:100,height:100,marginRight:15,borderRadius:50&#125;&#125;/&gt; &#123;/*右边的图片描述desc*/&#125; &lt;View style=&#123;styles.descStyle&#125;&gt; &lt;Text&gt; &#123;owData.desc&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); &#125;&#125;)const styles = StyleSheet.create(&#123; cellViewStyle: &#123; // borderBottomWidth: 1, // borderBottomColor: '#eeeeee', flexDirection:'row', &#125;, descStyle: &#123; flexDirection:'row', alignItems:'center' &#125;&#125;);AppRegistry.registerComponent('ListViewDemo', () =&gt; ListViewDemo); 运行效果初始状态。onPress触发后 注意cloneWithRows接受一个数组renderRow，hightlightRow &amp; renderSeparator renderRow 的回调函数可以接受4个参数，分别是数据，区块id，行id，highlightRow回调函数 其中hightlightRow的用法文档里面写的不是很明白。搜了一下，发现是这样用的 http://stackoverflow.com/questions/36000842/how-do-i-call-highlightrow-of-listview-renderrow 大致过程是这样的，如果触发了hightlightRow(sectionID,rowID)函数，则会将该sectionID，rowID相应的单元行的标记为highlighted。而renderSeparator会检查每一个row的相邻row的highlight情况，也就是adjacentRowHighlighted 的真假。adjacentRowHighlighted默认为false 文档对renderSeparator的解释 renderSeparator function #(sectionID, rowID, adjacentRowHighlighted) =&gt; renderable如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。在其上方的小节ID和行ID，以及邻近的行是否被高亮会作为参数传递进来。 (sectionID, rowID, adjacentRowHighlighted) =&gt; renderableIf provided, a renderable component to be rendered as the separator below each row but not the last row if there is a section header below. Take a sectionID and rowID of the row above and whether its adjacent row is highlighted. 123&lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; style=&#123;&#123;height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125;&gt;&lt;/View&gt; 这块代码表示了当adjacentRowHighlighted为true时，该view（分割线）的颜色为蓝色。 另外 http://wiki.jikexueyuan.com/project/react-native/image.htm 1&lt;Image source=&#123;&#123;uri:...&#125;&#125;/&gt; 中的uri的用法","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之ListView二","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView二/","text":"用listView实现九宫格效果这次时照着es6的写法写的，es6和es5的写法有很多地方不一样123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image&#125; from 'react-native';import Dimensions from 'Dimensions';const listData = [ &#123; src:'a', desc:'第一张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;];// 获取屏幕宽高var &#123;width,height&#125; = Dimensions.get('window');var cols = 3; //3列var cellWidth = 100,cellHeight = 100;var vMargin = (width-cols*cellWidth)/(cols+1); //九宫格横向margin算法var hMargin = 20; //九宫格纵向marginexport default class ListViewjiugongge extends Component &#123; constructor(props) &#123; super(props); const ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows(listData) &#125; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderRow&#125; // renderSeparator=&#123;(sectionID,rowID,adjacentRowHighlighted)=&gt;&#123; // console.log(sectionID,rowID,adjacentRowHighlighted); // return( // &lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; // style=&#123;&#123;height:90,width:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125; // &gt;&lt;/View&gt; // ) // &#125;&#125; contentContainerStyle=&#123;styles.listViewStyle&#125; /&gt; ); &#125; renderRow(owData,sectionID,rowID,highlightRow) &#123; return( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125; onPress=&#123;()=&gt;&#123;highlightRow(sectionID,rowID)&#125;&#125;&gt; &lt;View style=&#123;styles.cellViewStyle&#125;&gt; &#123;/*图片src*/&#125; &lt;Image source=&#123;&#123;uri:owData.src&#125;&#125; style=&#123;&#123;width:100,height:100,borderRadius:50&#125;&#125;/&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; listViewStyle: &#123; flexDirection:'row', flexWrap:'wrap', alignItems:'flex-start' &#125;, cellViewStyle: &#123; marginLeft:vMargin, marginTop: hMargin &#125;, descStyle: &#123; // flexDirection:'row', // alignItems:'center' &#125;&#125;);AppRegistry.registerComponent('ListViewjiugongge', () =&gt; ListViewjiugongge);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native 学习日记之ScrollView","date":"2017-02-07T09:44:54.000Z","path":"2017/02/07/学习日记/","text":"使用ScrollView 实现轮播效果还行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, Image, ScrollView&#125; from 'react-native';var Images = require('./images.json');import Dimensions from 'Dimensions';import TimerMixin from 'react-timer-mixin';var width = Dimensions.get('window').width;var ScrollViewProject = React.createClass(&#123; mixins:[TimerMixin], getInitialState() &#123; return &#123; currentPage:0 &#125; &#125;, render() &#123; return( &lt;View style=&#123;styles.container&#125;&gt; &#123;/*轮播*/&#125; &lt;ScrollView ref='scrollView' horizontal=&#123;true&#125; showsHorizontalScrollIndicator=&#123;false&#125; pagingEnabled=&#123;true&#125; onScroll=&#123;(e)=&gt;this.changeIndicators(e)&#125; onScrollBeginDrag=&#123;this.onScrollBeginDrag&#125; onScrollEndDrag=&#123;this.onScrollEndDrag&#125; &gt; &#123;this.renderAllImage()&#125; &lt;/ScrollView&gt; &#123;/*轮播指示器*/&#125; &lt;View style=&#123;styles.indicators&#125;&gt; &#123;this.renderIndicator()&#125; &lt;/View&gt; &lt;/View&gt; ); &#125;, componentDidMount() &#123; // this.setInterval( // ()=&gt;console.log('testTimeout'),1000 // ); // 开启定时器 this.startTimer(); &#125;, renderAllImage() &#123; var allImgs = []; var imgData = Images.data; var srcs = [ require(\"./imgs/a.jpg\"), require(\"./imgs/b.jpg\"), require(\"./imgs/c.jpg\"), require(\"./imgs/d.jpg\"), require(\"./imgs/e.jpg\") ]; for(let i=0;i&lt;imgData.length;i++) &#123; allImgs.push( &lt;Image key=&#123;i&#125; source=&#123;srcs[i]&#125; style=&#123;&#123;width:width,height:180&#125;&#125; /&gt; ) &#125; return allImgs; &#125;, renderIndicator() &#123; var indicators = []; for(let i=0;i&lt;5;i++) &#123; let style = (i==this.state.currentPage)?&#123;color:'#ffff00'&#125;:&#123;color:'#ffffff'&#125; indicators.push( &lt;Text key=&#123;i&#125; style=&#123;[&#123;fontSize:30,marginLeft:5&#125;,style]&#125;&gt;&amp;bull;&lt;/Text&gt; ) &#125; return indicators; &#125;, changeIndicators(e) &#123; var offsetX = e.nativeEvent.contentOffset.x; this.setState(&#123; currentPage:Math.floor(offsetX/width) &#125;) &#125;, // 设置轮播自动滚动 startTimer() &#123; // 1. 拿到scrollView var scrollView = this.refs.scrollView; // 2. 添加定时器 this.timer = this.setInterval(()=&gt;&#123; // console.log('haha'); // 2.1 设置圆点 var activePage; // 2.2 判断 if(this.state.currentPage+1 &gt;=5) activePage=0; else activePage=this.state.currentPage+1; // 2.3 更新状态 this.setState(&#123; currentPage:activePage &#125;) // 2.4 让scroll滚动起来 var offsetX = activePage * width; scrollView.scrollResponderScrollTo(&#123;x:offsetX,y:0,animated:true&#125;); &#125;,1000); &#125;, // 拖动轮播时停止定时器 onScrollBeginDrag() &#123; this.clearInterval(this.timer); &#125;, // 拖动结束后打开定时器 onScrollEndDrag() &#123; this.startTimer(); &#125;&#125;);const styles = StyleSheet.create(&#123; container: &#123; // flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', // marginTop:20 &#125;, indicators: &#123; flexDirection:'row', backgroundColor:'rgba(0,0,0,0.1)', height:30, width:width, alignItems:'center', marginTop:-30 &#125;&#125;);AppRegistry.registerComponent('ScrollViewProject', () =&gt; ScrollViewProject);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"'Generator 执行顺序'","date":"2016-12-26T04:13:50.000Z","path":"2016/12/26/Generator/","text":"generator 不同于普通的函数，执行方式有区别 12345678function* foo() &#123; yield 1; console.log(yield);&#125;let fooObj = foo();console.log(fooObj.next());console.log(fooObj.next());console.log(fooObj.next()); 第一个fooObj.next() 返回Object {value: 1, done: false}此时fooObj指针指向的是yield 1(第一个yield) 第二次运行fooObj.next(), 指针指向console.log(yield)中的yield即第二个yeild,此时函数返回Object {value: undefined, done: false} 第三次运行fooObj.next(), 指针继续向后移动,开始执行console.log(yield)语句,由于next参数为undefined,则指定上一次(即第二次yeild)yeild为undefined所以打印出undefined 和 Object {value: undefined, done: true}","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}]}]