[{"title":"react-router V4 踩坑","date":"2017-08-01T02:59:12.000Z","path":"2017/08/01/react-router-V4-踩坑/","text":"[TOC] The prop `history` is marked as required in `Router` …The prop `history` is marked as required in `Router`, but its value is `undefined`. in Router 出现这个报错是因为我用npm 安装的是react-router v4，react-router v4不再使用`` 这种方式定义history 实现类型。而是直接通过组件如BrowserRouter,HashRouter等 12345678910111213141516&lt;Router history=&#123;hashHistory&#125;&gt; &lt;Route path=\"/\" component=&#123;Main&#125;&gt;&lt;/Route&gt;&lt;/Router&gt;===&gt;&lt;BrowserRouter&gt; &lt;Route path=\"/\" component=&#123;Main&#125;&gt;&lt;/Route&gt;&lt;/BrowserRouter&gt;或者&lt;HashRouter&gt; &lt;Route path=\"/\" component=&#123;Main&#125;&gt;&lt;/Route&gt;&lt;/HashRouter&gt; ### A 'Router' may have only one child element react-router v4 在 下面只能放一个层级，类似与react 中render 不能有两个平级div一样 #### 解决办法： 用div 或者[Switch](https://reacttraining.com/react-router/web/api/Switch) 包裹所有Route 12345678&lt;Router&gt; &lt;div&gt; &lt;Route component=&#123;ComponentHeader&#125;&gt;&lt;/Route&gt; &lt;Switch&gt; &lt;Route component=&#123;ComponentFooter&#125; path='/footer/:id'&gt;&lt;/Route&gt; &lt;/Switch&gt; &lt;/div&gt;&lt;/Router&gt; ### webpack 配置问题 v4 中引入`` 组件, 而BrowserRouter使用的是HTML5 的history api, 在使用webpack-dev-server时会遇到 GET http://localhost:8080/xxx/xxx 404 (Not Found) 解决办法：webpack.config.js中加入1234567devServer: &#123; apiHistoryFallback: true,&#125;output: &#123; ..., publicPath: '/',&#125; 然后将index.html中的bundle.js改为/bundle.js 1&lt;script src='bundle.js'&gt;&lt;/script&gt; ===&gt; &lt;script src='/bundle.js'&gt;&lt;/script&gt; 参考：https://stackoverflow.com/questions/43209666/react-router-v4-cannot-get-url","tags":[]},{"title":"webpack css-modules 和global css 共存","date":"2017-07-30T09:29:14.000Z","path":"2017/07/30/webpack-css-modules-和global-css-共存/","text":"在使用ant design 时候遇到ant design css 和自定义的css 冲突的问题。./node_modules/ 中ant desing 的css 文件作为全局的css 和 自定义的css_modules 会发生冲突。解决办法是将/node_modules/中的css与自定义的css 分开处理。即对css_modules使用exclude:/node_modules/，对node_modules中的css使用include:path.resolve(__dirname,&#39;node_modules&#39;) 最开始定义的webpack.config.js 的处理方式：123456789101112131415161718192021222324252627282930313233343536373839404142var webpack = require('webpack');var path = require('path');module.exports = &#123; context: __dirname+'/src', entry: \"./js/index.js\", module: &#123; rules: [ &#123; test: /\\.js?$/, exclude: /(node_modules)/, use: &#123; loader: 'babel-loader', options: &#123; presets: ['react','es2015'], // ant design babel-plugin-import plugins: [['import',&#123;'libraryName':'antd','style':'css'&#125;]] &#125; &#125; &#125;, &#123; test: /\\.css$/, exclude: /(node_modules)/, use: [ &#123;loader:'style-loader'&#125;, &#123; loader: 'css-loader', options: &#123; modules: true, loacalIdentName: '[name]__[local]_[hash:base64:5]', sourceMap: true, importLoaders: 1 &#125; &#125; ] &#125;, ] &#125;, output: &#123; path: __dirname+'/src', filename: 'bundle.js' &#125;&#125; 报错： ERROR in ./node_modules/antd/lib/button/style/index.cssModule parse failed: /home/johnny/Project/react/demo3/node_modules/antd/lib/button/style/index.css Unexpected token (1:0)You may need an appropriate loader to handle this file type. 找到解决办法是，分别处理node_modules(ant design)中的css和css_modules：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var webpack = require('webpack');var path = require('path');module.exports = &#123; context: __dirname+'/src', entry: \"./js/index.js\", module: &#123; rules: [ &#123; test: /\\.js?$/, exclude: /(node_modules)/, use: &#123; loader: 'babel-loader', options: &#123; presets: ['react','es2015'], plugins: [['import',&#123;'libraryName':'antd','style':'css'&#125;]] &#125; &#125; &#125;, // css_modules 处理方式 &#123; test: /\\.css$/, exclude: /(node_modules)/, use: [ &#123;loader:'style-loader'&#125;, &#123; loader: 'css-loader', options: &#123; modules: true, loacalIdentName: '[name]__[local]_[hash:base64:5]', sourceMap: true, importLoaders: 1 &#125; &#125; ] &#125;, // ant design 处理方式 &#123; test: /\\.css$/, include: path.resolve(__dirname, 'node_modules'), use: [ &#123;loader:'style-loader'&#125;, &#123; loader:'css-loader', &#125; ] &#125;, ] &#125;, output: &#123; path: __dirname+'/src', filename: 'bundle.js' &#125;&#125;","tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"我好像是病了","date":"2017-06-26T08:40:06.000Z","path":"2017/06/26/我好像是病了/","text":"大概我已经这种状态半年有余了吧。哪种状态？我也说不清楚，大概就是废物应该有的状态，半年的时间里我好像什么都没做。 杨绛先生说，读书太少，想的太多。我觉得这句话用在我身上也许颇为合适，大概我真的是书读的太少，成天活在自己脑海中的世界？ 我在做什么？我不止一次的问自己这个问题，我到底在做什么？对于一个废物来说，好像做什么都很碍眼。我将自己的qq设置成隐身，微信的消息也从来不回，生怕别人来问我关于工作和生活的事情。我无法回答他们这些问题。在别人眼里我是一个和他们一样的人，不去工作只是嫌弃工资太低什么的，所以对我这种怠惰的行为表示非常的不解并加以鄙视！其实我对生活的要求一点都不高，因该说是仅仅存有一份奢求。 不知不觉我已经玩了这么久的游戏了，我现在在做的事情应该就是玩游戏了吧，又或者偶尔看看书？ 说起游戏来，我也是够失败的。不知为何我的心理很怪异，游戏这种事情对于大多数人来说应该就是放松心情的娱乐活动，可是对我而言却变了味了。一旦我开始做什么，我就开始患得患失，好胜心过分的强。以至于玩游戏都会非常的认真，非常的在意输赢。然而事后想想不过就是游戏罢了！所以当我决定要继续玩下去的时候，我就告诉自己一定要上到某个段位。想起来也是够好笑的，用了好久好久的时间，玩了很多很多局，终于达到了目标了。可是啊，上天是不会给废物好脸色的吧。在某一天，一页的连跪让我将近３个月的努力全部白费了。我哭了，哭得像个幼稚的小男孩一样！ 那真是一个很漫长的深夜啊，感觉心脏被一块巨石压的碰碰直跳，耳内传来一阵一阵心跳声，我好像已经无法呼吸了。我没有哭出声，巨大的耻辱感涌上心头，我不能被别人嘲笑，如果别人知道我哭了，会嘲笑我因为一个游戏而哭，嘲笑我是个失败者。我内心极度的惶恐，为什么我已经失败到连一个游戏都玩不好了？半夜两点了，我卸载了游戏卸载了一切与游戏有关的任何东西。啊，一个不被承认的人，做着别人嗤之以鼻的事情，然后还做失败了？想到这里我不由得多了一丝恼怒，愤恨，很自己为什么不能像一个正常人一样过正常人的生活。我不知道是什么东西在阻止我像一个正常人靠拢，我好像就是做不到，对于社会的恐惧使我畏缩到了极点，以至于对于买房买车结婚生子这种正常人的生活感到极度的厌恶，毋宁说是一种憎恨。 为什么我对生活的厌恶大概是从我意识到自己是同性恋开始吧。在我对爱情不甚了解的时候，我大体上觉得我是和大家一样的。后来我才意识到，原来一个特殊的身份会让自己活的这么累。我不断的问自己我到底做错了什么？ 虽然如今好像对同性恋这个话题已经不在避讳了，但是每当朋友谈起这些，我总会心生忌惮。我怕别人看穿我生存的把戏，看穿我和他们直接的不同。内心的自我不认同导致我越来越发的讨厌自己，也讨厌这个世界。我不知道是这个世界不够包容还是我内心太过狭隘，亦或二者皆有。内心有如此的想法不免显得有些自私，意识到这个问题后我反而越发的羞愧，是不是我太矫情了？可能是的，因为这个世界是没有人会注意到你的，过于渺小的我是不是太把自己当回事了！ 后来我终于还是扛不住了，内心的纠结，压抑已经快让我抑郁了。我开始了自救，果然在求生面前，一切的面子，人情，以及羞愧可耻的东西都已经变得不重要了吗。我已经无法顾及那么多了，我知道人在极度负面的情况下是很危险的，很容易毁掉别人毁掉自己。我向父母说明了我是同性恋，用一个很奇怪的词汇应该叫做——出柜。 我都快忘了那天的场景了，已经是晚上９点过，平时的我应该已经在寝室玩电脑开始享受“寝室时间”了（老实说，我已经很久没有“享受”过了，心里一直不太平，哪有心思享受生活）。我走到寝室外面８教的草坪上，随便找了一块看起来草比较多的地方一屁股做下去，其实我也不想管地有多脏了。一心自救的我已经顾不了胸口的沉闷了。我听到了父母熟悉的声音，一切就和往常一样，父母的声音依然这么的柔和，对我一阵嘘寒问暖还不停的问我钱够用吗。这使我心里一阵羞愧，就和平常一样多好，我如果不说出那么久埋在心里的事情我们就可以继续这样，我们就可以相安无事的继续着生活，我是不是不该打破这种平静，话已经卡到我嗓子里了，我开始哽咽。父母早已从我话音中听出了消极，明白我可能遇到了什么困难。我妈不停问，“是啥子事吗，你说嘛，有啥子是不能解决的嘛，你说嘛，你不说我们咋个帮你嘛！你说啊！不要憋在心头，你难受我们会更难受，更心痛。没得啥子事是解决不了的”，同时也在不停的安慰我，我已经不知道他们怎么安慰我的了。我带着哭腔，嘶哑的说出了“我是同性恋啊”这句话，那是一种对自己否定的腔调，对一切都失望透顶的腔调，对生活失去了希望的腔调。父母沉默了片刻，然后告诉我这种是心理问题，心理不正常。我挂断了电话！ 尽管事后不就他们继续安慰我，我也再也听不下去了。我不知道我这通电话对不对，反正那天以后我和父母的距离越来越远了，回家过后我除了吃饭也再也没有下过楼，离开过房间了。 所以为什么我要承受这些东西？又为什么我会把这些告诉父母？虽然这些事情他们有权利知道，可是我主动告诉他们，不也是为了减轻自己的压力？我将压力分担给了我的父母，我这样做真的对吗？我突然觉得自己是那么的自私，如果我不让父母知道这些，他们也不会心里那么痛苦还装作没事人一样来安慰我，也不会承受那么多痛苦。我不断的觉得自己对不起他们，可是又止不住内心的反感。他们的给我的安慰那么像缓兵之计，让我觉得非常的虚无缥缈，因为他们从来没有正面承认过我的身份，只是不停得表示来日方长，走一步看一步。面对父母，我一直游走与羞愧，抵触，反感之间，以致于我一点话都不想对他们讲，感觉说话很多余，我怕一说话就会揭开那层伤疤。 胆小鬼太宰治说，‘胆小鬼甚至会惧怕幸福，碰到棉花也会受伤’。胆小鬼——或者说懦弱的人，是如何苟活于世而不至于被“幸福”绞杀呢？ 除了逃避，恐怕没有任何伎俩了吧。我已经躲避这个世界很久了，躲着躲着就习惯了。甚至回想起初高中的时光，都发现自己可能是在躲着什么。埋头学习对我而言似乎是极好的，因为不用在乎其他事情，还可以得到父母的认可，并且可以在别人面前树立一种高冷学霸的形象，何乐而不为呢。如果我当时是一个活蹦乱跳的人，我现在该是什么样子呢？我现在的种种行为好像是在避免重蹈覆辙。我舍弃了太多对我好的人，我对他们抛来的橄榄枝不屑一顾，或者说是觉得橄榄枝太过于沉重，惧怕得不敢接受？多年之后他们都还能叫出我的名字，而我早就忘却一切了——我似乎有点狼心狗肺。但我真的是狼心狗肺之人？很多人和事我都一概忘掉了，这应该只是时间在作祟，我相信这是与我无关的。尽管我确实都把种种事情都归结为悲剧并妄图将其抹杀掉 不过胆小鬼也有勇敢的时候呢，这种勇敢应该无异于“狗急跳墙”，“走投无路”。我最勇敢的事情莫过于向自己喜欢的人表白了吧。“表白”这个词听起来真羞涩，像是青春的代表词汇。然而表白这件事情做起来可不是那么容易的。一个懦弱的人不到万不得已是不会触碰表白这种禁区的，但是人一旦有了感情这种东西，一切事情就都难以解释了。胆小鬼是不敢面对面表达感情的，写信，网络聊天这种才更符合胆小鬼的气质。我果然选择了后者。 那封信，或者说是一篇日志，是我当天凌晨3点过写的，那篇日志大概使我人生中所有的秘密了，如此的露骨，为世人所不齿。（果然在求生欲面前一切都变得不重要了吗。）当时的我脑子一片模糊，手脚不停的颤抖，可能是精疲力竭了。但是第二天早上我才将我的日志发出去，这几个小时我的心里在想什么可能只有鬼才知道。我应该已经做好了打算了，但我的这个行为太过于可怕，我无法预料到后果是怎么样的。我之所以能鼓起勇气大概还是由于求生欲吧，我不想就此消沉下去，不想让自己被心里的阴霾摧毁。虽然最后只得到了几句安慰的话，但至少聊胜于无啊。想想人生中做的最有勇气的事情除了出柜就当属表白了吧。仔细想象我果然是我正常人啊；我也有感情，也会鼓起勇气表白，只是我心里的那个人和大家不一样而已啊！但想到这里，心里莫名的惭愧，我如果不跟他表白，他就不用帮我保守秘密，我没有资格让人家保守秘密，也没有资格用这种方式去恳求几句安慰。 当天正午，我又写了一篇日志 今天妈妈去看望外婆了，刚走不久，天就下起大雨来，天气预报说明天还是雨。先心疼一秒钟！昨天发生了太多的事情，这些事情的发生让我自己都怕。我将4号写的那些东西，原封不动的给了母亲和他看。我让妈一个人在楼上，面对着电脑看我写的东西。我不敢面对她，我不敢看到她哭的样子，我更怕自己会哭。良久，妈下楼的脚步声越来越清晰，我躺在床上，翻了个侧身。就这样，我背对着妈谈论了很久。我的内心已经极度敏感和脆弱，我不忍心看到父母伤心，可我更不可能为了满足父母的“传统”而改变我自己。我态度非常的坚决，我说，我不会结婚。妈质疑说，同性恋就不可以结婚？我真的怨他们对同性恋的不了解，我不想再说了。过了片刻，妈又说，我只希望你过的好就行，以后的事情谁知道呢，先好好儿的活就行了；我不管你是啥子，你总而言之要健健康康的。我无奈的说道，我可能没有办法让你们享受天伦之乐，享受到其他为人父母的幸福。她说，无所谓啊，只要人活的好，一辈子健健康康的，比什么都强，才会幸福。……我意识到自己已经做了这么一件冲动的事情了，那么，接下来，就是表白了我给他看了我写的东西，我知道，我可能将会失去他，甚至我的世界将没有他的存在。可是，那本书说的好——幸福是等不到的！我的剧本是，他拒绝了我，说了一些冠冕堂皇的话，然后我觉得这个人虚伪，最后删掉这个人。而实际的剧本是，为什么我却很庆幸，很庆幸他一直安慰我；说我要好好的，走一步看一步，以后一定会遇到对的人；我居然愿意接受他的祝福！昨天晚上，和他聊了好多好多，我还是会问到很多被拒绝是问的问题。可我都得到了最好的答案！这就是他，一个让我有理由喜欢的他。其实，我应该感激他，他不仅没有歧视我，没有选择冷漠和无视。我感激他选择了支持我，理解我，心疼我，尽管离我渴望的感情相差甚远。可这些，已经让我阴暗的心变得开始愿意接受阳光的洗礼。我仍然会把他放在心里很重要的位置，可是不是最重要的那个，已经不重要了。我爱他，所以他幸福了，我才能够放下我的爱，只是慢慢的这种爱会变得平静。 我大概永远都不想和父母多说一句话了 未来? 吴双，这条短信我也不知道要不要发给你，我想了很久，决定还是发给你了。我不知道为什么，我就是觉得你这次你去香港回来就要搬走了，可能是因为我知道你是跟凯美瑞一块去的吧。我有一次在学校门口看见你从他的车下来，回到家后，我闻到你身上跟家里不一样的沐浴露味道，还有一次晚上打你电话你没接，我就去你实验室找你，你不在，我在校门口等你，又看到你从他车里下来，每次看到你从他车里下来，我心里都难受的跟要死了一样，可我也不敢多问你，我怕我一问，你一不高兴就搬走了。我一想到你搬走我就觉得这些都不重要了。我喜欢男人，这个我不否认，但因为老师这个特殊身份，我从来没找过男朋友，我不得不像一般人一样去结婚生子。其实我今年年初真打算今年结婚的，可偏偏又遇到了你，你每天跟我吵架打架，傻b来傻b去的，我就像回到我读体校那会的日子，在你跟前，我特别自然，特别轻松，做着我自己。说实话，遇到你之后，我也想过，我豁出去了，不做老师，不受这些束缚了，可能就能跟你在一起了。可我也就只能想想，我知道我没办法豁出去，我除了当老师教教体育，我其他的什么都不会，我的家庭你也多少了解一点，我必须负担我妈跟小妹的生活，我需要这个稳定的工作来保证她们的生活，所以我也只能认命，只能结婚生子，虽然我千万个不乐意。我也不怕你笑话，我做梦都想着跟一个男人生活在一起情景，从你搬来的第一天，我就有了美梦成真的感觉，每天跟你嬉皮笑脸的，看着蛮横不讲理的样子，我特别开心，特别满足。我把你带进校队，带你认识我同事，家人，朋友，我就是想让你像我男朋友一样融入我的生活。你问我为什么挑2007年结婚，我没找什么大师算过，我现在告诉你实话，因为2007年你就毕业了，你毕业就出国了，你出国了，我这个梦也就没了，那我也就没其他念想了，可以安安心心的去结婚，去过一般人的日子了。你还记得你问我小宝是谁吗？其实当你第一次叫我傻b的时候，我在心里就叫你小宝了。我喜欢你，但我知道我连问你喜不喜欢我的资格都没有，毕竟我连个男朋友的名分都给不了你，我也没资格要求你说什么做什么，但我还是想你从香港回来别搬走，让我继续把这个梦做下去，直到你毕业。小宝，别走，好吗？ 这是《从他们到我们》这本小说中的桥段,我看到这长长的短信总算是体会到什么是锥心之痛。是啊，感情这种事情本来就是这样啊，普普通通，简简单单但又刻骨铭心。看这部剧的时候评论里都是一阵唏嘘，我也跟着叹息不已。我们这群人已经到了需要用这种15分钟的短剧来寻找安慰的程度了吗？运超对双儿的感情是那么真，可是依然在现实面前低头，还是抛弃了吴双。他们在一起的时光难道不是和普通人一样，一样的认真对待，一样的会有喜怒哀乐吗。我好像还没有体会过这种感觉，难道我的未来也是这样？不，对于胆小鬼来说，这种“幸福”是永远不敢奢求的吧。因为怕受伤，所以都不敢勇敢的向短暂的幸福迈开一步！也许，感情这东西就是不在乎天长地久，只在乎曾经拥有吧；未来会怎样，谁能说得清，珍惜当下可能才是最明智的吧。双儿在结尾时的那淡淡的苦笑，却看哭了多少人。他的笑，证明他接受了这个世界的安排，接受了这短暂而又美好的爱情；他无法改变这些，只有祝福他爱的人。我也祝我喜欢的那个人幸福，如果能在他的婚礼上看到他幸福的笑容我也心满意足了。 所以我真的甘心这样吗？没有未来的未来根本不是我想要的未来啊！我的未来在哪儿呢？ 昨日跟朋友聊起关于未来已经生活的话题。他问，“你有想过以后做什么吗，有对未来的打算吗？” “我从没有如此打算过，甚至没有想过以后的事情” “那你为什么不去死，你活着有什么意义，真的，你真的可以去死了” “如果我真的去死了，那你会背大锅哦” 我一阵苦笑，并不理会。我死了，那么我就认输了啊，我输给了自己，也输给了这个世界。 王宝强接受采访时说，“活着比什么都强”。这句话我一直认同，并深信不疑。《士兵突击》里也有一句话——好好活就是做有意义的事儿，有意义的事儿就是好好活。我应该没有好好活过吧，做的一切事情都是为了得到别人的承认，什么时候能够为自己而活。我过去十多二十年全是为了符合父母理想的样子而活着，如果我不是同性恋的话，也许我会像他们想象的那样活的像个正常人——追求自己的理想，不断的奋斗，并融入这个社会，成为社会的一份子吧。从小谨小慎微的做一个乖乖仔，似乎是腻烦了啊。我多么希望父母生气，大声的骂我，大声的骂我是一个不孝子，是一个狼心狗肺的人；他们对我无休止的原谅反而让我感到无所适从。 仔细想想，我写得这些东西一定会招致无休止的鄙视和唾弃吧！这么下贱卑微妄自菲薄，自私自利，自甘堕落的人有什么资格谈论未来，谈论理想呢！ 可我还是抱有一丝的希望，我的“未来”在哪里呢？ 生活还在继续人应该是为自己而活的！我存在于这个世界，时间在单一的向前推动，我总有一天会变老，但正因为在这过程中的不确定性以及通过自己的选择改变未来的可能性让我对生存有了一些希望。如果我开始努力的克服我的问题，我也许会对“生活”二字有新的体会，尽管这个过程看起来是那么的痛苦。也许是我过分的失落或者消极才会导致我今天这个局面。如果我真的能承受那么多的压力，成长为一个有担当的人，那么我一定会变得更好吧。我还是那个胆小鬼，在诸多重大的需要承担责任的问题上，我永远是在畏首畏尾。我真的甘心一直拿父母的钱啃老吗？尽管我和父母之间依然存在着微妙的隔阂，但是这并不代表我就有理由颓废下去，我的一切的想法都不过是如此的幼稚罢了。我现在还在反思子是否仅仅是拿着同性恋这个事实在要挟我的父母，给我的颓废找一个借口罢了。仔细想象，同性恋这个问题真的影响到我的生活了吗，我还这么年轻，这几年完全没有谈婚论嫁的烦恼啊！其实我是那么的自由，父母对我的态度已经是那么的宽容了，比起有些父母以死相逼的态度，我应该感激他们才对，至少他们给了我几年时间，让我过自己的生活，以后的事情以后再说。思来想去果然还是自己的原因，其实我就是一个普通人，一个正常人，一个活生生的人。生活还在继续，我要试着去面对了！ がんばって！！！","tags":[]},{"title":"react-native学习日记之TabNavigator","date":"2017-02-27T05:11:59.000Z","path":"2017/02/27/react-native学习日记之TabNavigator/","text":"安卓中不能像IOS一样有NavigatorIOS和tabBarIOS，如果需要跨平台实现类似的功能，必须要借助第三方组件如https://github.com/exponent/react-native-tab-navigator 安装： npm install react-native-tab-navigator 使用： import TabNavigator from &#39;react-native-tab-navigator&#39; 这个组件的使用方式类似于TabBarIOS，配合Navigator一起使用就可以到达跨平台的效果了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, Image, Navigator&#125; from 'react-native';import TabNavigator from 'react-native-tab-navigator';import HomeView from './Components/homeView.js';import ProfileView from './Components/profileView.js';var icons=[ require('./imgs/tabbar_1.png'), require('./imgs/tabbar_2.png'), require('./imgs/tabbar_3.png'), require('./imgs/tabbar_4.png')];var pressIcons = [ require('./imgs/tabbar_1_press.png'), require('./imgs/tabbar_2_press.png'), require('./imgs/tabbar_3_press.png'), require('./imgs/tabbar_4_press.png')]export default class TabNavigatorDemo extends Component &#123; constructor(props) &#123; super(props); this.state=&#123; selectedTab:'home' &#125; &#125; render() &#123; let defaultName = 'HomeView'; let defaultComponent = HomeView; return ( &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt; &lt;TabNavigator tabBarStyle=&#123;styles.tabBarStyle&#125;&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'home'&#125; title=\"Home\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[0]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[0]&#125; /&gt;&#125; badgeText=\"1\" onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'home' &#125;)&#125;&gt; &lt;Navigator initialRoute=&#123;&#123;name:defaultName,component:defaultComponent&#125;&#125; configureScene=&#123;(route)=&gt;&#123; return Navigator.SceneConfigs.VerticalDownSwipeJump; &#125;&#125; renderScene=&#123;(route,navigator)=&gt;&#123; // console.log(route,navigator); let Component = route.component; return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt; &#125;&#125; navigationBar=&#123; &lt;Navigator.NavigationBar routeMapper=&#123;&#123; LeftButton: (route,navigator,index,navState)=&gt;&#123; return (&lt;Text&gt;前进&lt;/Text&gt;); &#125;, Title: (route,navigator,index,navState)=&gt;&#123; return (&lt;Text&gt;首页&lt;/Text&gt;); &#125;, RightButton: (route, navigator, index, navState) =&gt; &#123;&#125;, &#125;&#125; /&gt; &#125; /&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'profile'&#125; title=\"Profile\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[1]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[1]&#125; /&gt;&#125; // renderBadge=&#123;() =&gt; &lt;CustomBadgeView /&gt;&#125; onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'profile' &#125;)&#125;&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'favor'&#125; title=\"favor\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[2]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[2]&#125; /&gt;&#125; // renderBadge=&#123;() =&gt; &lt;CustomBadgeView /&gt;&#125; onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'favor' &#125;)&#125;&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;TabNavigator.Item selected=&#123;this.state.selectedTab === 'me'&#125; title=\"me\" renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;icons[3]&#125; /&gt;&#125; renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;styles.iconStyle&#125; source=&#123;pressIcons[3]&#125; /&gt;&#125; // renderBadge=&#123;() =&gt; &lt;CustomBadgeView /&gt;&#125; onPress=&#123;() =&gt; this.setState(&#123; selectedTab: 'me' &#125;)&#125;&gt; &lt;ProfileView/&gt; &lt;/TabNavigator.Item&gt; &lt;/TabNavigator&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; tabBarStyle: &#123; // backgroundColor:'red' &#125;, iconStyle: &#123; width:20, height:20 &#125;&#125;);AppRegistry.registerComponent('TabNavigatorDemo', () =&gt; TabNavigatorDemo);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之tabBar","date":"2017-02-22T03:44:59.000Z","path":"2017/02/22/react-native学习日记之tabBar/","text":"IOS 上可以使用tabBarIOS组件实现底栏tabBar，但是安卓不行。不过可以借助第三方组件实现类似的功能react-native-tab-view 基本用法如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View&#125; from 'react-native';import &#123;TabViewAnimated,TabBar&#125; from 'react-native-tab-view';export default class tabView extends Component &#123; state = &#123; index: 0, routes: [ &#123; key: '1', title: 'First' &#125;, &#123; key: '2', title: 'Second' &#125;, ], &#125;; _handleChangeTab = (index) =&gt; &#123; this.setState(&#123;index&#125;); &#125;; _renderHeader = (props) =&gt; &#123; console.log(TabBar); return &lt;TabBar &#123;...props&#125; style=&#123;styles.tabBar&#125;/&gt; &#125;; _renderFooter = (props) =&gt; &#123; console.log(TabBar); return &lt;TabBar &#123;...props&#125; style=&#123;styles.tabBar&#125; indicatorStyle=&#123;&#123;backgroundColor:'transparent'&#125;&#125;/&gt; &#125;; _renderScene = (&#123;route&#125;) =&gt; &#123; switch (route.key) &#123; case '1': return &lt;View style=&#123;[styles.page,&#123;backgroundColor:'#ff4081'&#125;]&#125;&gt; &lt;Text&gt; 第一页 &lt;/Text&gt; &lt;/View&gt; case \"2\": return &lt;View style=&#123;[styles.page,&#123;backgroundColor:'#673ab7'&#125;]&#125;&gt; &lt;Text&gt; 第二页 &lt;/Text&gt; &lt;/View&gt; default: return null; &#125; &#125;; render() &#123; return ( &lt;TabViewAnimated style=&#123;styles.container&#125; navigationState=&#123;this.state&#125; renderScene=&#123;this._renderScene&#125; renderHeader=&#123;this._renderHeader&#125; // renderFooter=&#123;this._renderFooter&#125; onRequestChangeTab=&#123;this._handleChangeTab&#125; /&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, &#125;, page: &#123; flex: 1, alignItems: 'center', justifyContent: 'center', &#125;,&#125;);AppRegistry.registerComponent('tabView', () =&gt; tabView);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"atom package清单","date":"2017-02-19T07:35:16.000Z","path":"2017/02/19/atom-package清单/","text":"做个备份123456789101112131415161718192021222324252627282930313233Community Packages (32) /home/johnny/.atom/packages├── atom-material-syntax@1.0.2├── atom-material-ui@1.3.9├── atom-react-native-autocomplete@0.0.27├── atom-react-native-css@1.1.3├── atom-ternjs@0.17.0├── autoclose-html@0.23.0├── autocomplete-modules@1.6.7├── autocomplete-paths@1.0.5├── autoprefixer@3.6.1├── color-picker@2.2.5├── emmet@2.4.3├── file-icons@2.0.15├── fold-functions@0.5.0├── highlight-selected@0.12.0├── jquery-snippets@11.0.0├── language-babel@2.54.1├── language-javascript-jsx@0.3.7├── linter@1.11.21├── linter-csslint@1.3.3├── linter-htmlhint@1.3.1├── linter-js-standard-jsx@4.1.2├── linter-jshint@3.0.2├── markdown-preview-plus@2.4.1├── markdown-scroll-sync@2.1.2├── markdown-table-formatter@2.8.4├── minimap@4.26.8├── minimap-highlight-selected@4.5.0├── nuclide@0.205.0├── pigments@0.39.0├── react@0.16.2├── react-es6-snippets@0.3.0└── run-in-browser@0.1.3","tags":[{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}]},{"title":"react-native学习日记之ListView三","date":"2017-02-19T06:42:05.000Z","path":"2017/02/19/react-native学习日记之ListView三/","text":"ListView with SectionHeader要实现拥有section header 的ListView，需要dataBlob数据结构和renderSectionHeader 属性 dataBlobdataBlob是一个数据结构（通常是一个对象），包含了渲染ListView的所有数据。其中包括Section Header 数据和每个行Row的行数据Row Data。要获得dataBlob中的数据，首先要实现遍历方法(getSectionData 和 getRowData) dataBlob结构： 实现getSectionData 和 getRowData 1234567891011121314151617constructor(props) &#123; super(props); var getSectionData = (dataBlob,sectionID) =&gt; &#123; return dataBlob[sectionID]; &#125; var getRowData = (dataBlob,sectionID,rowID) =&gt; &#123; return dataBlob[sectionID+':'+rowID]; &#125; this.state = &#123; dataSource: new ListView.DataSource(&#123; getSectionData:getSectionData, getRowData:getRowData, rowHasChanged: (r1,r2)=&gt;r1!==r2, sectionHeaderHasChanged:(s1,s2)=&gt;s1!==s2 &#125;) &#125;&#125; 处理外部json数据，生成dataBlobjson数据如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; \"data\": [ &#123; \"images\": [ &#123; \"icon\": \"a\", \"name\": \"路飞\" &#125;, &#123; \"icon\": \"b\", \"name\": \"阿里\" &#125;, &#123; \"icon\": \"c\", \"name\": \"。。。\" &#125;, &#123; \"icon\": \"d\", \"name\": \"风景\" &#125;, &#123; \"icon\": \"e\", \"name\": \"女神(づ￣ 3￣)づ\" &#125; ], \"title\": \"B\" &#125;, &#123; \"images\": [ &#123; \"icon\": \"a\", \"name\": \"路飞\" &#125;, &#123; \"icon\": \"b\", \"name\": \"阿里\" &#125;, &#123; \"icon\": \"c\", \"name\": \"。。。\" &#125;, &#123; \"icon\": \"d\", \"name\": \"风景\" &#125;, &#123; \"icon\": \"e\", \"name\": \"女神(づ￣ 3￣)づ\" &#125; ], \"title\": \"B\" &#125;, ... ]&#125; 1234567891011121314151617181920212223242526272829303132loadDataFromJson() &#123; var data = require('./data.json').data; console.log(data); var dataBlob = &#123;&#125;, sectionIDs = []; //存放组ID的数组 rowIDs = []; //存放行ID的数组 rows = []; //存放行数据数组 for(var i=0,l=data.length;i&lt;l;i++) &#123; // 1.把section id 放入sectionID数组中 var sectionID = i; // sectionIDs.push(sectionID); sectionIDs.push(i); //sectionID 不一定必须是i：0,1,2,3... // 2. 把组中内容放入dataBlob中 // 相当于dataBlob[SectionID]=data[i].title dataBlob[i]=data[i].title; // 3. 取出该数组中所有的行数据 rows = data[i].images; // 4. 记录每一行中的数据 rowIDs[i]=[]; // 5. 获取行中每一组数据 for(var j=0,lr=rows.length;j&lt;lr;j++)&#123; // 把行号放入rowIDs中 rowIDs[i].push(j); // 把每一行中的内容放如dataBlob对象中 dataBlob[i+':'+j] = rows[j]; &#125; &#125; console.log(dataBlob,sectionIDs,rowIDs); this.setState(&#123; dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs) &#125;);&#125; 可以看到将dataBlob，sectionIDs，rowIDs打印出来是如下结果 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121/** * 吸顶效果 */import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image,&#125; from 'react-native';export default class ListViewSectionHeader extends Component &#123; constructor(props) &#123; super(props); var getSectionData = (dataBlob,sectionID) =&gt; &#123; return dataBlob[sectionID]; &#125; var getRowData = (dataBlob,sectionID,rowID) =&gt; &#123; return dataBlob[sectionID+':'+rowID]; &#125; this.state = &#123; dataSource: new ListView.DataSource(&#123; getSectionData:getSectionData, getRowData:getRowData, rowHasChanged: (r1,r2)=&gt;r1!==r2, sectionHeaderHasChanged:(s1,s2)=&gt;s1!==s2 &#125;) &#125; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderRow&#125; renderSectionHeader=&#123;this.renderSectionHeader&#125; /&gt; ); &#125; componentDidMount() &#123; this.loadDataFromJson(); &#125; loadDataFromJson() &#123; var data = require('./data.json').data; console.log(data); var dataBlob = &#123;&#125;, sectionIDs = []; //存放组ID的数组 rowIDs = []; //存放行ID的数组 rows = []; //存放行数据数组 for(var i=0,l=data.length;i&lt;l;i++) &#123; // 1.把section id 放入sectionID数组中 var sectionID = i; // sectionIDs.push(sectionID); sectionIDs.push(i); //sectionID 不一定必须是i：0,1,2,3... // 2. 把组中内容放入dataBlob中 // 相当于dataBlob[SectionID]=data[i].title dataBlob[i]=data[i].title; // 3. 取出该数组中所有的行数据 rows = data[i].images; // 4. 记录每一行中的数据 rowIDs[i]=[]; // 5. 获取行中每一组数据 for(var j=0,lr=rows.length;j&lt;lr;j++)&#123; // 把行号放入rowIDs中 rowIDs[i].push(j); // 把每一行中的内容放如dataBlob对象中 dataBlob[i+':'+j] = rows[j]; &#125; &#125; console.log(dataBlob,sectionIDs,rowIDs); this.setState(&#123; dataSource: this.state.dataSource.cloneWithRowsAndSections(dataBlob,sectionIDs,rowIDs) &#125;); &#125; renderRow(owData,sectionID,rowID,highlightRow) &#123; console.log(owData); return( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125;&gt; &lt;View style=&#123;styles.innerViewStyle&#125;&gt; &lt;Image source=&#123;&#123;uri:owData.icon&#125;&#125; style=&#123;styles.iconStyle&#125;/&gt; &lt;Text style=&#123;styles.descStyle&#125;&gt; &#123;owData.name&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); &#125; renderSectionHeader(sectionData,sectionID) &#123; return( &lt;View style=&#123;styles.secHeaderStyle&#125;&gt; &lt;Text&gt; &#123;sectionData&#125; &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; innerViewStyle: &#123; flexDirection:'row' &#125;, iconStyle: &#123; width: 100, height: 100, &#125;, descStyle: &#123; fontSize: 20, alignSelf:'center', marginLeft:20 &#125;, secHeaderStyle: &#123; height:30, justifyContent:'center', paddingLeft:10, backgroundColor:\"#ede1e1\" &#125;&#125;);AppRegistry.registerComponent('ListViewSectionHeader', () =&gt; ListViewSectionHeader); 最终效果很难看，不过实现方式没错就行啦","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"ubuntu 14.04配置","date":"2017-02-17T15:05:15.000Z","path":"2017/02/17/ubuntu配置/","text":"最近又尝试从Windows 切换到 ubuntu 。经过很多次折腾，发现自己对linux 有了一定的理解过后再去接触这些，已经不再那么陌生和“恐惧”了 安装Windows 10 和 ubuntu 共存安装参考 切换显卡系统设置–&gt; 软件和更行 –&gt; 附加驱动（据说开源驱动性能虽然不强，但是稳定性好，我还是继续用开源驱动吧） 换主题unity乳齿便秘的默认主题真的让我第一次开机看到它过后就想换掉！ubuntu14.04的主题很多不是扁平化的，如果电脑支持的话还是安装16.04比较好（该死的联想z485） 首先安装unity-tweak-tool1sudo apt install unity-tweak-tool 然后推荐去noobSlab，这个网站有很多个主题可以选择，安装方式也写出来了，配合unity-tweak-tool使用。个人喜欢Numix主题 安装搜狗输入法去搜狗官网下载linux 版本搜狗，然后双击安装，完毕后。系统设置–&gt;语言支持–&gt;键盘输入方式系统：fcitx–&gt;重启 如果发现安装好后不能调出输入法面板，输入时只能看不到候选词，那么可以检查一下依赖sudo apt-get install -f 如果使用一段时间过后搜狗输入法一直崩溃,可能是配置文件出问题了，可以选择删除配置文件，然后重启fctix12345killall fctixrm -rf ~/.config/sogou-qimpanelrm -rf ~/.config/SogouPY.usersrm -rf ~/.config/SogouPYfctix 安装cairo-dock很实用的小工具（模拟mac的dock栏）1234sudo add-apt-repository ppa:cairo-dock-team/ppasudo apt-get updatesudo apt-get install cairo-dock# 启动命令 cairo-dock 第一次打开会提示是否开启OpenGl，我的电脑上面测试开启过后会出问题，我选择不开启，如果以后想开启，可以使用cairo-dock -c（不开启） / cario-dock -o（开启OpenGl）切换 安装shadowsocks-qt5“纸飞机”这个东西还是必须要有的啊，没有这个东西感觉整个人都不好了1234sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5#启动命令 ss-qt5 安装proxychain4ss-qt5 是桌面级应用，尽管连上代理，命令行还是无法通过代理上网。proxychain 可以完美解决命令行不能使用代理的问题1234git clone https://github.com/rofl0r/proxychains-ng.gitcd proxychains-ng./configure(sudo) make &amp;&amp; make instal 安装完毕后，需要手动新建配置文件12345sudo vi /etc/proxychains.conf#然后填入以下内容[ProxyList]socks5 127.0.0.1 1080 使用方法1proxychains (sudo) 需要执行的命令 ... 为firefox 和 chrome 安装flash首先进入系统设置–&gt;软件和更行–&gt;其它软件–&gt;勾选Canonial合作伙伴，然后运行命令1sudo apt install adobe-flashplugin 安装atomatom 是一款非常优秀的编辑器，不解释。由于官方网站没有提供32bit deb包（64bit无视），因此需要自行通过ppa安装123sudo add-apt-repository ppa:webupd8team/atom sudo apt-get update sudo apt-get install atom 安装nodejs 最新版（较新版）到https://nodejs.org/download/release/v7.5.0/ 去下载最新的nodejs包我这里选择node-v7.5.0-linux-x86.tar.gz下载下来过后，执行1234tar -zxvf node-v7.5.0-linux-x86.tar.gzcp node-v7.5.0-linux-x86 /opt/node-v7.5.0sudo ln -s /opt/node-v7.5.0/bin/node /usr/local/bin/nodesudo ln -s /opt/node-v7.5.0/bin/npm /usr/local/bin/npm 现在可以使用node 和npm命令了，接下载就是配置npm 全局安装路径了（可以不用配置）12npm config set prefix \"/home/johnny/.npm-global/\"# 使用npm config get prefix 可以查看全局安装路径 还没完，这时候npm install xxx -g 过后会发现执行xxx命令无效。比如说安装hexo， npm install hexo -g成功后，执行hexo却提示command not found。配置一下环境变量就可以解决这个问题1echo -e \"export PATH=$(npm prefix -g)/bin:$PATH\" &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc 安装oracle-jdk首先下载jdk然后解压,我将他解压到了~/jdk1.8.0_121/,如果只是当前用户用的话，直接改.bashrc文件中配置环境变量就好了，不过建议写到/etc/profile中123456vi ~/.bashrc#在最末尾加入export JAVA_HOME=/home/johnny/jdk1.8.0_121 ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jre export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 然后12source ~/.bashrcjava -version 就可以看到java版本已经变成安装的版本了 安卓开发环境搭建https://developer.android.com/studio/index.html下载好sdk，解压到自己想解压的目录，我这里解压到/home/johnny/sdk然后配置环境变量 12345vi ~/.bashrc#在最末尾加入export ANDROID_HOME=/home/johnny/Johnny/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools 现在执行android 就可以打开sdk 管理器了，下载自己需要的package就行了。但是由于现在的sdk版本高了，默认是64位，所以32位ubuntu在运行adb命令时就会报错。file adb 也可以看到adb是64位的。解决方案就是将platform-tools 替换成32位的老版本，替换后就可以成功运行adb命令了 最终效果","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://yoursite.com/tags/ubuntu/"}]},{"title":"react-native学习日记之ListView二","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView二/","text":"用listView实现九宫格效果这次时照着es6的写法写的，es6和es5的写法有很多地方不一样123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, TouchableOpacity, Image&#125; from 'react-native';import Dimensions from 'Dimensions';const listData = [ &#123; src:'a', desc:'第一张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;];// 获取屏幕宽高var &#123;width,height&#125; = Dimensions.get('window');var cols = 3; //3列var cellWidth = 100,cellHeight = 100;var vMargin = (width-cols*cellWidth)/(cols+1); //九宫格横向margin算法var hMargin = 20; //九宫格纵向marginexport default class ListViewjiugongge extends Component &#123; constructor(props) &#123; super(props); const ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows(listData) &#125; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderRow&#125; // renderSeparator=&#123;(sectionID,rowID,adjacentRowHighlighted)=&gt;&#123; // console.log(sectionID,rowID,adjacentRowHighlighted); // return( // &lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; // style=&#123;&#123;height:90,width:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125; // &gt;&lt;/View&gt; // ) // &#125;&#125; contentContainerStyle=&#123;styles.listViewStyle&#125; /&gt; ); &#125; renderRow(owData,sectionID,rowID,highlightRow) &#123; return( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125; onPress=&#123;()=&gt;&#123;highlightRow(sectionID,rowID)&#125;&#125;&gt; &lt;View style=&#123;styles.cellViewStyle&#125;&gt; &#123;/*图片src*/&#125; &lt;Image source=&#123;&#123;uri:owData.src&#125;&#125; style=&#123;&#123;width:100,height:100,borderRadius:50&#125;&#125;/&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) &#125;&#125;const styles = StyleSheet.create(&#123; listViewStyle: &#123; flexDirection:'row', flexWrap:'wrap', alignItems:'flex-start' &#125;, cellViewStyle: &#123; marginLeft:vMargin, marginTop: hMargin &#125;, descStyle: &#123; // flexDirection:'row', // alignItems:'center' &#125;&#125;);AppRegistry.registerComponent('ListViewjiugongge', () =&gt; ListViewjiugongge);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native学习日记之ListView","date":"2017-02-08T05:35:04.000Z","path":"2017/02/08/react学习日记之ListView/","text":"react-native ListView DOC ListView 基本用法1234567891011121314151617181920212223242526//es5 写法var ListViewDemo = React.createClass(&#123; getInitialState() &#123; // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); // 1.2 设置返回数据 return &#123; //listData 为一个数组格式 dataSource: ds.cloneWithRows(listData) &#125; &#125;, // 设置render函数 render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; //this.renderListView后不加括号表示默认接受所有参数（owData，sectionID...) /&gt; ); &#125;, renderListView(owData, sectionID, rowID, highlightRow) &#123; //renderRow 回调函数 &#125;&#125; 12345678910111213141516171819//es6 写法class MyComponent extends Component &#123; constructor() &#123; super(); const ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows(listData), &#125;; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; /&gt; ); &#125;&#125; 完整demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, ListView, Image, TouchableOpacity, Alert&#125; from 'react-native';var listData = [ &#123; src:'a', desc:'第一张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;, &#123; src:'b', desc:'第二张' &#125;, &#123; src:'c', desc:'第三张' &#125;, &#123; src:'d', desc:'第四张' &#125;, &#123; src:'e', desc:'第五张' &#125;];var ListViewDemo = React.createClass(&#123; getInitialState() &#123; // 设置初始值 // 1.1 设置数据源 var ds = new ListView.DataSource(&#123;rowHasChanged:(r1,r2)=&gt;r1!==r2&#125;); // 1.2 设置返回数据 return &#123; dataSource: ds.cloneWithRows(listData) &#125; &#125;, // 设置render函数 render() &#123; return ( &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderListView&#125; renderSeparator=&#123;(sectionID, rowID, adjacentRowHighlighted)=&gt;&#123; return ( &lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; style=&#123;&#123;height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125; &gt;&lt;/View&gt; ); &#125;&#125; /&gt; ); &#125;, // renderRow的回调函数 renderListView(owData, sectionID, rowID, highlightRow) &#123; return ( &lt;TouchableOpacity activeOpacity=&#123;0.5&#125; onPress=&#123;()=&gt;highlightRow(sectionID,rowID)&#125;&gt; &lt;View style=&#123;styles.cellViewStyle&#125;&gt; &#123;/*左边的图片src*/&#125; &lt;Image source=&#123;&#123;uri:owData.src&#125;&#125; style=&#123;&#123;width:100,height:100,marginRight:15,borderRadius:50&#125;&#125;/&gt; &#123;/*右边的图片描述desc*/&#125; &lt;View style=&#123;styles.descStyle&#125;&gt; &lt;Text&gt; &#123;owData.desc&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); &#125;&#125;)const styles = StyleSheet.create(&#123; cellViewStyle: &#123; // borderBottomWidth: 1, // borderBottomColor: '#eeeeee', flexDirection:'row', &#125;, descStyle: &#123; flexDirection:'row', alignItems:'center' &#125;&#125;);AppRegistry.registerComponent('ListViewDemo', () =&gt; ListViewDemo); 运行效果初始状态。onPress触发后 注意cloneWithRows接受一个数组renderRow，hightlightRow &amp; renderSeparator renderRow 的回调函数可以接受4个参数，分别是数据，区块id，行id，highlightRow回调函数 其中hightlightRow的用法文档里面写的不是很明白。搜了一下，发现是这样用的 http://stackoverflow.com/questions/36000842/how-do-i-call-highlightrow-of-listview-renderrow 大致过程是这样的，如果触发了hightlightRow(sectionID,rowID)函数，则会将该sectionID，rowID相应的单元行的标记为highlighted。而renderSeparator会检查每一个row的相邻row的highlight情况，也就是adjacentRowHighlighted 的真假。adjacentRowHighlighted默认为false 文档对renderSeparator的解释 renderSeparator function #(sectionID, rowID, adjacentRowHighlighted) =&gt; renderable如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。在其上方的小节ID和行ID，以及邻近的行是否被高亮会作为参数传递进来。 (sectionID, rowID, adjacentRowHighlighted) =&gt; renderableIf provided, a renderable component to be rendered as the separator below each row but not the last row if there is a section header below. Take a sectionID and rowID of the row above and whether its adjacent row is highlighted. 123&lt;View key=&#123;`$&#123;sectionID&#125;-$&#123;rowID&#125;`&#125; style=&#123;&#123;height:1,backgroundColor:adjacentRowHighlighted?'blue':'red'&#125;&#125;&gt;&lt;/View&gt; 这块代码表示了当adjacentRowHighlighted为true时，该view（分割线）的颜色为蓝色。 另外 http://wiki.jikexueyuan.com/project/react-native/image.htm 1&lt;Image source=&#123;&#123;uri:...&#125;&#125;/&gt; 中的uri的用法","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"react-native 学习日记之ScrollView","date":"2017-02-07T09:44:54.000Z","path":"2017/02/07/学习日记/","text":"使用ScrollView 实现轮播效果还行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import React, &#123; Component &#125; from 'react';import &#123; AppRegistry, StyleSheet, Text, View, Image, ScrollView&#125; from 'react-native';var Images = require('./images.json');import Dimensions from 'Dimensions';import TimerMixin from 'react-timer-mixin';var width = Dimensions.get('window').width;var ScrollViewProject = React.createClass(&#123; mixins:[TimerMixin], getInitialState() &#123; return &#123; currentPage:0 &#125; &#125;, render() &#123; return( &lt;View style=&#123;styles.container&#125;&gt; &#123;/*轮播*/&#125; &lt;ScrollView ref='scrollView' horizontal=&#123;true&#125; showsHorizontalScrollIndicator=&#123;false&#125; pagingEnabled=&#123;true&#125; onScroll=&#123;(e)=&gt;this.changeIndicators(e)&#125; onScrollBeginDrag=&#123;this.onScrollBeginDrag&#125; onScrollEndDrag=&#123;this.onScrollEndDrag&#125; &gt; &#123;this.renderAllImage()&#125; &lt;/ScrollView&gt; &#123;/*轮播指示器*/&#125; &lt;View style=&#123;styles.indicators&#125;&gt; &#123;this.renderIndicator()&#125; &lt;/View&gt; &lt;/View&gt; ); &#125;, componentDidMount() &#123; // this.setInterval( // ()=&gt;console.log('testTimeout'),1000 // ); // 开启定时器 this.startTimer(); &#125;, renderAllImage() &#123; var allImgs = []; var imgData = Images.data; var srcs = [ require(\"./imgs/a.jpg\"), require(\"./imgs/b.jpg\"), require(\"./imgs/c.jpg\"), require(\"./imgs/d.jpg\"), require(\"./imgs/e.jpg\") ]; for(let i=0;i&lt;imgData.length;i++) &#123; allImgs.push( &lt;Image key=&#123;i&#125; source=&#123;srcs[i]&#125; style=&#123;&#123;width:width,height:180&#125;&#125; /&gt; ) &#125; return allImgs; &#125;, renderIndicator() &#123; var indicators = []; for(let i=0;i&lt;5;i++) &#123; let style = (i==this.state.currentPage)?&#123;color:'#ffff00'&#125;:&#123;color:'#ffffff'&#125; indicators.push( &lt;Text key=&#123;i&#125; style=&#123;[&#123;fontSize:30,marginLeft:5&#125;,style]&#125;&gt;&amp;bull;&lt;/Text&gt; ) &#125; return indicators; &#125;, changeIndicators(e) &#123; var offsetX = e.nativeEvent.contentOffset.x; this.setState(&#123; currentPage:Math.floor(offsetX/width) &#125;) &#125;, // 设置轮播自动滚动 startTimer() &#123; // 1. 拿到scrollView var scrollView = this.refs.scrollView; // 2. 添加定时器 this.timer = this.setInterval(()=&gt;&#123; // console.log('haha'); // 2.1 设置圆点 var activePage; // 2.2 判断 if(this.state.currentPage+1 &gt;=5) activePage=0; else activePage=this.state.currentPage+1; // 2.3 更新状态 this.setState(&#123; currentPage:activePage &#125;) // 2.4 让scroll滚动起来 var offsetX = activePage * width; scrollView.scrollResponderScrollTo(&#123;x:offsetX,y:0,animated:true&#125;); &#125;,1000); &#125;, // 拖动轮播时停止定时器 onScrollBeginDrag() &#123; this.clearInterval(this.timer); &#125;, // 拖动结束后打开定时器 onScrollEndDrag() &#123; this.startTimer(); &#125;&#125;);const styles = StyleSheet.create(&#123; container: &#123; // flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', // marginTop:20 &#125;, indicators: &#123; flexDirection:'row', backgroundColor:'rgba(0,0,0,0.1)', height:30, width:width, alignItems:'center', marginTop:-30 &#125;&#125;);AppRegistry.registerComponent('ScrollViewProject', () =&gt; ScrollViewProject);","tags":[{"name":"react-native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"'Generator 执行顺序'","date":"2016-12-26T04:13:50.000Z","path":"2016/12/26/Generator/","text":"generator 不同于普通的函数，执行方式有区别 12345678function* foo() &#123; yield 1; console.log(yield);&#125;let fooObj = foo();console.log(fooObj.next());console.log(fooObj.next());console.log(fooObj.next()); 第一个fooObj.next() 返回Object {value: 1, done: false}此时fooObj指针指向的是yield 1(第一个yield) 第二次运行fooObj.next(), 指针指向console.log(yield)中的yield即第二个yeild,此时函数返回Object {value: undefined, done: false} 第三次运行fooObj.next(), 指针继续向后移动,开始执行console.log(yield)语句,由于next参数为undefined,则指定上一次(即第二次yeild)yeild为undefined所以打印出undefined 和 Object {value: undefined, done: true}","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://yoursite.com/tags/es6/"}]}]